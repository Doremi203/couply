name: Backend Service Release Flow
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
        description: "Service name (e.g. auth, matcher)"
      db_name:
        required: false
        type: string
        description: "Database name for migrations"
      needs_migrations:
        required: false
        type: string
        description: "Service need for migrations"
        default: true
      instance_group_name:
        required: true
        type: string
        description: "YC instance group name for deployment"

permissions:
  contents: write

jobs:
  codegen:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/codegen
      - name: Upload codegen results
        uses: actions/upload-artifact@v4
        with:
          name: codegen-output
          path: backend

  test-unit:
    needs: codegen
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: backend/${{ inputs.service_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Download codegen results
        uses: actions/download-artifact@v4
        with:
          name: codegen-output
          path: backend

      - name: Run tests
        run: BASE_MIGRATIONS_PATH=${{ github.workspace }}/backend go test ./... -race

  test-functional:
    needs: codegen
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: backend/pytest
    steps:
      - uses: actions/checkout@v4

      - name: Download codegen results
        uses: actions/download-artifact@v4
        with:
          name: codegen-output
          path: backend

      - name: Docker compose
        run: cd .. && docker compose -f docker-compose.tests.yml up -d

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install test dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip install allure-pytest allure-commandline

      - name: Run functional tests with Allure
        run: |
          source .venv/bin/activate
          pytest ${{ inputs.service_name }} --alluredir=allure-results

      - name: Generate Allure report
        run: |
          source .venv/bin/activate
          allure generate allure-results -o allure-report --clean

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: backend/pytest/allure-report

  build-testing:
    needs:
      - codegen
      - test-unit
      - test-functional
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Download codegen results
        uses: actions/download-artifact@v4
        with:
          name: codegen-output
          path: backend

      - name: Set release version
        run: echo "RELEASE_VERSION=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Setup yc
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /opt/yc -n
          echo '${{ secrets.YC_SERVICE_KEY }}' > sa-key.json
          /opt/yc/bin/yc config set folder-id b1ggapscf0p06cohndtt
          /opt/yc/bin/yc config set service-account-key sa-key.json

      - name: Login docker
        run: |
          echo $(/opt/yc/bin/yc iam create-token)|docker login --username iam --password-stdin cr.yandex

      - name: Build Docker image
        run: docker build --build-arg service=${{ inputs.service_name }} -t cr.yandex/crpe9kgeql1v6b7gujfj/${{ inputs.service_name }}-testing:${{ env.RELEASE_VERSION }} --push . -f testing.Dockerfile

  migrate-testing-up:
    runs-on: ubuntu-latest
    needs: build-testing
    if: ${{ inputs.needs_migrations }}
    timeout-minutes: 10
    defaults:
      run:
        working-directory: backend/${{ inputs.service_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Download goose
        if: ${{ inputs.needs_migrations == 'true' }}
        run: curl -fsSL https://raw.githubusercontent.com/pressly/goose/master/install.sh | sh

      - name: Setup yc
        if: ${{ inputs.needs_migrations == 'true' }}
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /opt/yc -n
          echo '${{ secrets.YC_SERVICE_KEY }}' > sa-key.json
          /opt/yc/bin/yc config set service-account-key sa-key.json
          /opt/yc/bin/yc config set folder-id b1ggapscf0p06cohndtt

      - name: Migrate up
        if: ${{ inputs.needs_migrations == 'true' }}
        run: |
          echo "Fetching DB_USER from Yandex Cloud Lockbox..."
          DB_USER=$(/opt/yc/bin/yc lockbox payload get --name testing-db --key db-user)
          DB_PASS=$(/opt/yc/bin/yc lockbox payload get --name testing-db --key db-password)
          
          mkdir -p ~/.postgresql && wget "https://storage.yandexcloud.net/cloud-certs/CA.pem" --output-document ~/.postgresql/root.crt && chmod 0600 ~/.postgresql/root.crt
          
          export GOOSE_DRIVER=postgres
          export GOOSE_DBSTRING="postgres://$DB_USER:$DB_PASS@${{ vars.TESTING_DB_HOST }}:6432/${{ inputs.db_name }}?sslmode=verify-full&target_session_attrs=read-write&sslrootcert=/home/runner/.postgresql/root.crt"
          goose -v -dir "migrations" up

      - name: Success
        run: echo "migrated"

  deploy-testing:
    runs-on: ubuntu-latest
    needs:
      - migrate-testing-up
    timeout-minutes: 20
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - name: Download codegen results
        uses: actions/download-artifact@v4
        with:
          name: codegen-output
          path: backend

      - name: Set release version
        run: echo "RELEASE_VERSION=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Setup yc
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -i /opt/yc -n
          echo '${{ secrets.YC_SERVICE_KEY }}' > sa-key.json
          /opt/yc/bin/yc config set folder-id b1ggapscf0p06cohndtt
          /opt/yc/bin/yc config set service-account-key sa-key.json

      - name: Generate docker-compose.yml with version
        run: |
          sed -e "s/{{SERVICE_VERSION}}/${{ env.RELEASE_VERSION }}/g" \
              -e "s/{{SERVICE_NAME}}/${{ inputs.service_name }}/g" \
              ${{ github.workspace }}/backend/docker-compose.testing-template.yml \
          > docker-compose.testing-generated.yml

      - name: Deploy to testing
        run: |
          /opt/yc/bin/yc compute instance-group add-metadata --name ${{ inputs.instance_group_name }} --metadata-from-file docker-compose=docker-compose.testing-generated.yml

  publish-release:
    runs-on: ubuntu-latest
    needs: deploy-testing
    environment:
      name: Production
    steps:
      - name: Set release version
        run: echo "RELEASE_VERSION=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ inputs.service_name }}-v${{ env.RELEASE_VERSION }}
          name: Release ${{ inputs.service_name }} v${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
