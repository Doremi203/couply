// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: matching-service/v1/matching_service.proto

package matching_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMatchV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMatchV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMatchV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMatchV1RequestMultiError, or nil if none found.
func (m *CreateMatchV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMatchV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainUserId

	// no validation rules for ChosenUserId

	if len(errors) > 0 {
		return CreateMatchV1RequestMultiError(errors)
	}

	return nil
}

// CreateMatchV1RequestMultiError is an error wrapping multiple validation
// errors returned by CreateMatchV1Request.ValidateAll() if the designated
// constraints aren't met.
type CreateMatchV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMatchV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMatchV1RequestMultiError) AllErrors() []error { return m }

// CreateMatchV1RequestValidationError is the validation error returned by
// CreateMatchV1Request.Validate if the designated constraints aren't met.
type CreateMatchV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMatchV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMatchV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMatchV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMatchV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMatchV1RequestValidationError) ErrorName() string {
	return "CreateMatchV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMatchV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMatchV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMatchV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMatchV1RequestValidationError{}

// Validate checks the field values on CreateMatchV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMatchV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMatchV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMatchV1ResponseMultiError, or nil if none found.
func (m *CreateMatchV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMatchV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMatchV1ResponseValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMatchV1ResponseValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMatchV1ResponseValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMatchV1ResponseMultiError(errors)
	}

	return nil
}

// CreateMatchV1ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMatchV1Response.ValidateAll() if the designated
// constraints aren't met.
type CreateMatchV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMatchV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMatchV1ResponseMultiError) AllErrors() []error { return m }

// CreateMatchV1ResponseValidationError is the validation error returned by
// CreateMatchV1Response.Validate if the designated constraints aren't met.
type CreateMatchV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMatchV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMatchV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMatchV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMatchV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMatchV1ResponseValidationError) ErrorName() string {
	return "CreateMatchV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMatchV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMatchV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMatchV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMatchV1ResponseValidationError{}

// Validate checks the field values on UpdateMatchV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMatchV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMatchV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMatchV1RequestMultiError, or nil if none found.
func (m *UpdateMatchV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMatchV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainUserId

	// no validation rules for ChosenUserId

	// no validation rules for Approved

	if len(errors) > 0 {
		return UpdateMatchV1RequestMultiError(errors)
	}

	return nil
}

// UpdateMatchV1RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMatchV1Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateMatchV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMatchV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMatchV1RequestMultiError) AllErrors() []error { return m }

// UpdateMatchV1RequestValidationError is the validation error returned by
// UpdateMatchV1Request.Validate if the designated constraints aren't met.
type UpdateMatchV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMatchV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMatchV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMatchV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMatchV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMatchV1RequestValidationError) ErrorName() string {
	return "UpdateMatchV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMatchV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMatchV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMatchV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMatchV1RequestValidationError{}

// Validate checks the field values on UpdateMatchV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMatchV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMatchV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMatchV1ResponseMultiError, or nil if none found.
func (m *UpdateMatchV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMatchV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMatchV1ResponseValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMatchV1ResponseValidationError{
					field:  "Match",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMatchV1ResponseValidationError{
				field:  "Match",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMatchV1ResponseMultiError(errors)
	}

	return nil
}

// UpdateMatchV1ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMatchV1Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateMatchV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMatchV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMatchV1ResponseMultiError) AllErrors() []error { return m }

// UpdateMatchV1ResponseValidationError is the validation error returned by
// UpdateMatchV1Response.Validate if the designated constraints aren't met.
type UpdateMatchV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMatchV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMatchV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMatchV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMatchV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMatchV1ResponseValidationError) ErrorName() string {
	return "UpdateMatchV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMatchV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMatchV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMatchV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMatchV1ResponseValidationError{}

// Validate checks the field values on DeleteMatchV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMatchV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMatchV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMatchV1RequestMultiError, or nil if none found.
func (m *DeleteMatchV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMatchV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainUserId

	// no validation rules for ChosenUserId

	if len(errors) > 0 {
		return DeleteMatchV1RequestMultiError(errors)
	}

	return nil
}

// DeleteMatchV1RequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMatchV1Request.ValidateAll() if the designated
// constraints aren't met.
type DeleteMatchV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMatchV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMatchV1RequestMultiError) AllErrors() []error { return m }

// DeleteMatchV1RequestValidationError is the validation error returned by
// DeleteMatchV1Request.Validate if the designated constraints aren't met.
type DeleteMatchV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMatchV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMatchV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMatchV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMatchV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMatchV1RequestValidationError) ErrorName() string {
	return "DeleteMatchV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMatchV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMatchV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMatchV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMatchV1RequestValidationError{}

// Validate checks the field values on DeleteMatchV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMatchV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMatchV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMatchV1ResponseMultiError, or nil if none found.
func (m *DeleteMatchV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMatchV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMatchV1ResponseMultiError(errors)
	}

	return nil
}

// DeleteMatchV1ResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMatchV1Response.ValidateAll() if the designated
// constraints aren't met.
type DeleteMatchV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMatchV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMatchV1ResponseMultiError) AllErrors() []error { return m }

// DeleteMatchV1ResponseValidationError is the validation error returned by
// DeleteMatchV1Response.Validate if the designated constraints aren't met.
type DeleteMatchV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMatchV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMatchV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMatchV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMatchV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMatchV1ResponseValidationError) ErrorName() string {
	return "DeleteMatchV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMatchV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMatchV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMatchV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMatchV1ResponseValidationError{}

// Validate checks the field values on FetchMatchesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchMatchesV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchMatchesV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchMatchesV1RequestMultiError, or nil if none found.
func (m *FetchMatchesV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchMatchesV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainUserId

	if m.GetLimit() <= 0 {
		err := FetchMatchesV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := FetchMatchesV1RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FetchMatchesV1RequestMultiError(errors)
	}

	return nil
}

// FetchMatchesV1RequestMultiError is an error wrapping multiple validation
// errors returned by FetchMatchesV1Request.ValidateAll() if the designated
// constraints aren't met.
type FetchMatchesV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchMatchesV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchMatchesV1RequestMultiError) AllErrors() []error { return m }

// FetchMatchesV1RequestValidationError is the validation error returned by
// FetchMatchesV1Request.Validate if the designated constraints aren't met.
type FetchMatchesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchMatchesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchMatchesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchMatchesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchMatchesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchMatchesV1RequestValidationError) ErrorName() string {
	return "FetchMatchesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchMatchesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchMatchesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchMatchesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchMatchesV1RequestValidationError{}

// Validate checks the field values on FetchMatchesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchMatchesV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchMatchesV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchMatchesV1ResponseMultiError, or nil if none found.
func (m *FetchMatchesV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchMatchesV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchMatchesV1ResponseValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchMatchesV1ResponseValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchMatchesV1ResponseValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FetchMatchesV1ResponseMultiError(errors)
	}

	return nil
}

// FetchMatchesV1ResponseMultiError is an error wrapping multiple validation
// errors returned by FetchMatchesV1Response.ValidateAll() if the designated
// constraints aren't met.
type FetchMatchesV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchMatchesV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchMatchesV1ResponseMultiError) AllErrors() []error { return m }

// FetchMatchesV1ResponseValidationError is the validation error returned by
// FetchMatchesV1Response.Validate if the designated constraints aren't met.
type FetchMatchesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchMatchesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchMatchesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchMatchesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchMatchesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchMatchesV1ResponseValidationError) ErrorName() string {
	return "FetchMatchesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchMatchesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchMatchesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchMatchesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchMatchesV1ResponseValidationError{}

// Validate checks the field values on FetchIncomingMatchesV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchIncomingMatchesV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchIncomingMatchesV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FetchIncomingMatchesV1RequestMultiError, or nil if none found.
func (m *FetchIncomingMatchesV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchIncomingMatchesV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChosenUserId

	if m.GetLimit() <= 0 {
		err := FetchIncomingMatchesV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := FetchIncomingMatchesV1RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FetchIncomingMatchesV1RequestMultiError(errors)
	}

	return nil
}

// FetchIncomingMatchesV1RequestMultiError is an error wrapping multiple
// validation errors returned by FetchIncomingMatchesV1Request.ValidateAll()
// if the designated constraints aren't met.
type FetchIncomingMatchesV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchIncomingMatchesV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchIncomingMatchesV1RequestMultiError) AllErrors() []error { return m }

// FetchIncomingMatchesV1RequestValidationError is the validation error
// returned by FetchIncomingMatchesV1Request.Validate if the designated
// constraints aren't met.
type FetchIncomingMatchesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchIncomingMatchesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchIncomingMatchesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchIncomingMatchesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchIncomingMatchesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchIncomingMatchesV1RequestValidationError) ErrorName() string {
	return "FetchIncomingMatchesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchIncomingMatchesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchIncomingMatchesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchIncomingMatchesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchIncomingMatchesV1RequestValidationError{}

// Validate checks the field values on FetchIncomingMatchesV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchIncomingMatchesV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchIncomingMatchesV1Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FetchIncomingMatchesV1ResponseMultiError, or nil if none found.
func (m *FetchIncomingMatchesV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchIncomingMatchesV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchIncomingMatchesV1ResponseValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchIncomingMatchesV1ResponseValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchIncomingMatchesV1ResponseValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FetchIncomingMatchesV1ResponseMultiError(errors)
	}

	return nil
}

// FetchIncomingMatchesV1ResponseMultiError is an error wrapping multiple
// validation errors returned by FetchIncomingMatchesV1Response.ValidateAll()
// if the designated constraints aren't met.
type FetchIncomingMatchesV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchIncomingMatchesV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchIncomingMatchesV1ResponseMultiError) AllErrors() []error { return m }

// FetchIncomingMatchesV1ResponseValidationError is the validation error
// returned by FetchIncomingMatchesV1Response.Validate if the designated
// constraints aren't met.
type FetchIncomingMatchesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchIncomingMatchesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchIncomingMatchesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchIncomingMatchesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchIncomingMatchesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchIncomingMatchesV1ResponseValidationError) ErrorName() string {
	return "FetchIncomingMatchesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchIncomingMatchesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchIncomingMatchesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchIncomingMatchesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchIncomingMatchesV1ResponseValidationError{}

// Validate checks the field values on FetchOutgoingMatchesV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchOutgoingMatchesV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchOutgoingMatchesV1Request with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FetchOutgoingMatchesV1RequestMultiError, or nil if none found.
func (m *FetchOutgoingMatchesV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchOutgoingMatchesV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainUserId

	if m.GetLimit() <= 0 {
		err := FetchOutgoingMatchesV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := FetchOutgoingMatchesV1RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FetchOutgoingMatchesV1RequestMultiError(errors)
	}

	return nil
}

// FetchOutgoingMatchesV1RequestMultiError is an error wrapping multiple
// validation errors returned by FetchOutgoingMatchesV1Request.ValidateAll()
// if the designated constraints aren't met.
type FetchOutgoingMatchesV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchOutgoingMatchesV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchOutgoingMatchesV1RequestMultiError) AllErrors() []error { return m }

// FetchOutgoingMatchesV1RequestValidationError is the validation error
// returned by FetchOutgoingMatchesV1Request.Validate if the designated
// constraints aren't met.
type FetchOutgoingMatchesV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchOutgoingMatchesV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchOutgoingMatchesV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchOutgoingMatchesV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchOutgoingMatchesV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchOutgoingMatchesV1RequestValidationError) ErrorName() string {
	return "FetchOutgoingMatchesV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e FetchOutgoingMatchesV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchOutgoingMatchesV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchOutgoingMatchesV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchOutgoingMatchesV1RequestValidationError{}

// Validate checks the field values on FetchOutgoingMatchesV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FetchOutgoingMatchesV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchOutgoingMatchesV1Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FetchOutgoingMatchesV1ResponseMultiError, or nil if none found.
func (m *FetchOutgoingMatchesV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchOutgoingMatchesV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FetchOutgoingMatchesV1ResponseValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FetchOutgoingMatchesV1ResponseValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FetchOutgoingMatchesV1ResponseValidationError{
					field:  fmt.Sprintf("Match[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FetchOutgoingMatchesV1ResponseMultiError(errors)
	}

	return nil
}

// FetchOutgoingMatchesV1ResponseMultiError is an error wrapping multiple
// validation errors returned by FetchOutgoingMatchesV1Response.ValidateAll()
// if the designated constraints aren't met.
type FetchOutgoingMatchesV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchOutgoingMatchesV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchOutgoingMatchesV1ResponseMultiError) AllErrors() []error { return m }

// FetchOutgoingMatchesV1ResponseValidationError is the validation error
// returned by FetchOutgoingMatchesV1Response.Validate if the designated
// constraints aren't met.
type FetchOutgoingMatchesV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchOutgoingMatchesV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchOutgoingMatchesV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchOutgoingMatchesV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchOutgoingMatchesV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchOutgoingMatchesV1ResponseValidationError) ErrorName() string {
	return "FetchOutgoingMatchesV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FetchOutgoingMatchesV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchOutgoingMatchesV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchOutgoingMatchesV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchOutgoingMatchesV1ResponseValidationError{}

// Validate checks the field values on Match with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Match) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Match with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MatchMultiError, or nil if none found.
func (m *Match) ValidateAll() error {
	return m.validate(true)
}

func (m *Match) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainUserId

	// no validation rules for ChosenUserId

	// no validation rules for Approved

	if len(errors) > 0 {
		return MatchMultiError(errors)
	}

	return nil
}

// MatchMultiError is an error wrapping multiple validation errors returned by
// Match.ValidateAll() if the designated constraints aren't met.
type MatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatchMultiError) AllErrors() []error { return m }

// MatchValidationError is the validation error returned by Match.Validate if
// the designated constraints aren't met.
type MatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchValidationError) ErrorName() string { return "MatchValidationError" }

// Error satisfies the builtin error interface
func (e MatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchValidationError{}
