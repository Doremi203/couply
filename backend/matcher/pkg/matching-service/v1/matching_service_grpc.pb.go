// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: matching-service/v1/matching_service.proto

package matching_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchingService_CreateMatchV1_FullMethodName          = "/backend.MatchingService/CreateMatchV1"
	MatchingService_UpdateMatchV1_FullMethodName          = "/backend.MatchingService/UpdateMatchV1"
	MatchingService_DeleteMatchV1_FullMethodName          = "/backend.MatchingService/DeleteMatchV1"
	MatchingService_FetchMatchesV1_FullMethodName         = "/backend.MatchingService/FetchMatchesV1"
	MatchingService_FetchIncomingMatchesV1_FullMethodName = "/backend.MatchingService/FetchIncomingMatchesV1"
	MatchingService_FetchOutgoingMatchesV1_FullMethodName = "/backend.MatchingService/FetchOutgoingMatchesV1"
)

// MatchingServiceClient is the client API for MatchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchingServiceClient interface {
	CreateMatchV1(ctx context.Context, in *CreateMatchV1Request, opts ...grpc.CallOption) (*CreateMatchV1Response, error)
	UpdateMatchV1(ctx context.Context, in *UpdateMatchV1Request, opts ...grpc.CallOption) (*UpdateMatchV1Response, error)
	DeleteMatchV1(ctx context.Context, in *DeleteMatchV1Request, opts ...grpc.CallOption) (*DeleteMatchV1Response, error)
	FetchMatchesV1(ctx context.Context, in *FetchMatchesV1Request, opts ...grpc.CallOption) (*FetchMatchesV1Response, error)
	FetchIncomingMatchesV1(ctx context.Context, in *FetchIncomingMatchesV1Request, opts ...grpc.CallOption) (*FetchIncomingMatchesV1Response, error)
	FetchOutgoingMatchesV1(ctx context.Context, in *FetchOutgoingMatchesV1Request, opts ...grpc.CallOption) (*FetchOutgoingMatchesV1Response, error)
}

type matchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchingServiceClient(cc grpc.ClientConnInterface) MatchingServiceClient {
	return &matchingServiceClient{cc}
}

func (c *matchingServiceClient) CreateMatchV1(ctx context.Context, in *CreateMatchV1Request, opts ...grpc.CallOption) (*CreateMatchV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMatchV1Response)
	err := c.cc.Invoke(ctx, MatchingService_CreateMatchV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) UpdateMatchV1(ctx context.Context, in *UpdateMatchV1Request, opts ...grpc.CallOption) (*UpdateMatchV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMatchV1Response)
	err := c.cc.Invoke(ctx, MatchingService_UpdateMatchV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) DeleteMatchV1(ctx context.Context, in *DeleteMatchV1Request, opts ...grpc.CallOption) (*DeleteMatchV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMatchV1Response)
	err := c.cc.Invoke(ctx, MatchingService_DeleteMatchV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) FetchMatchesV1(ctx context.Context, in *FetchMatchesV1Request, opts ...grpc.CallOption) (*FetchMatchesV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchMatchesV1Response)
	err := c.cc.Invoke(ctx, MatchingService_FetchMatchesV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) FetchIncomingMatchesV1(ctx context.Context, in *FetchIncomingMatchesV1Request, opts ...grpc.CallOption) (*FetchIncomingMatchesV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchIncomingMatchesV1Response)
	err := c.cc.Invoke(ctx, MatchingService_FetchIncomingMatchesV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchingServiceClient) FetchOutgoingMatchesV1(ctx context.Context, in *FetchOutgoingMatchesV1Request, opts ...grpc.CallOption) (*FetchOutgoingMatchesV1Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchOutgoingMatchesV1Response)
	err := c.cc.Invoke(ctx, MatchingService_FetchOutgoingMatchesV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchingServiceServer is the server API for MatchingService service.
// All implementations must embed UnimplementedMatchingServiceServer
// for forward compatibility.
type MatchingServiceServer interface {
	CreateMatchV1(context.Context, *CreateMatchV1Request) (*CreateMatchV1Response, error)
	UpdateMatchV1(context.Context, *UpdateMatchV1Request) (*UpdateMatchV1Response, error)
	DeleteMatchV1(context.Context, *DeleteMatchV1Request) (*DeleteMatchV1Response, error)
	FetchMatchesV1(context.Context, *FetchMatchesV1Request) (*FetchMatchesV1Response, error)
	FetchIncomingMatchesV1(context.Context, *FetchIncomingMatchesV1Request) (*FetchIncomingMatchesV1Response, error)
	FetchOutgoingMatchesV1(context.Context, *FetchOutgoingMatchesV1Request) (*FetchOutgoingMatchesV1Response, error)
	mustEmbedUnimplementedMatchingServiceServer()
}

// UnimplementedMatchingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchingServiceServer struct{}

func (UnimplementedMatchingServiceServer) CreateMatchV1(context.Context, *CreateMatchV1Request) (*CreateMatchV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatchV1 not implemented")
}
func (UnimplementedMatchingServiceServer) UpdateMatchV1(context.Context, *UpdateMatchV1Request) (*UpdateMatchV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMatchV1 not implemented")
}
func (UnimplementedMatchingServiceServer) DeleteMatchV1(context.Context, *DeleteMatchV1Request) (*DeleteMatchV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMatchV1 not implemented")
}
func (UnimplementedMatchingServiceServer) FetchMatchesV1(context.Context, *FetchMatchesV1Request) (*FetchMatchesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMatchesV1 not implemented")
}
func (UnimplementedMatchingServiceServer) FetchIncomingMatchesV1(context.Context, *FetchIncomingMatchesV1Request) (*FetchIncomingMatchesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchIncomingMatchesV1 not implemented")
}
func (UnimplementedMatchingServiceServer) FetchOutgoingMatchesV1(context.Context, *FetchOutgoingMatchesV1Request) (*FetchOutgoingMatchesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOutgoingMatchesV1 not implemented")
}
func (UnimplementedMatchingServiceServer) mustEmbedUnimplementedMatchingServiceServer() {}
func (UnimplementedMatchingServiceServer) testEmbeddedByValue()                         {}

// UnsafeMatchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchingServiceServer will
// result in compilation errors.
type UnsafeMatchingServiceServer interface {
	mustEmbedUnimplementedMatchingServiceServer()
}

func RegisterMatchingServiceServer(s grpc.ServiceRegistrar, srv MatchingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchingService_ServiceDesc, srv)
}

func _MatchingService_CreateMatchV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatchV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).CreateMatchV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_CreateMatchV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).CreateMatchV1(ctx, req.(*CreateMatchV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_UpdateMatchV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMatchV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).UpdateMatchV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_UpdateMatchV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).UpdateMatchV1(ctx, req.(*UpdateMatchV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_DeleteMatchV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMatchV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).DeleteMatchV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_DeleteMatchV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).DeleteMatchV1(ctx, req.(*DeleteMatchV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_FetchMatchesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchMatchesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).FetchMatchesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_FetchMatchesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).FetchMatchesV1(ctx, req.(*FetchMatchesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_FetchIncomingMatchesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchIncomingMatchesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).FetchIncomingMatchesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_FetchIncomingMatchesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).FetchIncomingMatchesV1(ctx, req.(*FetchIncomingMatchesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchingService_FetchOutgoingMatchesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOutgoingMatchesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchingServiceServer).FetchOutgoingMatchesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchingService_FetchOutgoingMatchesV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchingServiceServer).FetchOutgoingMatchesV1(ctx, req.(*FetchOutgoingMatchesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchingService_ServiceDesc is the grpc.ServiceDesc for MatchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.MatchingService",
	HandlerType: (*MatchingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMatchV1",
			Handler:    _MatchingService_CreateMatchV1_Handler,
		},
		{
			MethodName: "UpdateMatchV1",
			Handler:    _MatchingService_UpdateMatchV1_Handler,
		},
		{
			MethodName: "DeleteMatchV1",
			Handler:    _MatchingService_DeleteMatchV1_Handler,
		},
		{
			MethodName: "FetchMatchesV1",
			Handler:    _MatchingService_FetchMatchesV1_Handler,
		},
		{
			MethodName: "FetchIncomingMatchesV1",
			Handler:    _MatchingService_FetchIncomingMatchesV1_Handler,
		},
		{
			MethodName: "FetchOutgoingMatchesV1",
			Handler:    _MatchingService_FetchOutgoingMatchesV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matching-service/v1/matching_service.proto",
}
