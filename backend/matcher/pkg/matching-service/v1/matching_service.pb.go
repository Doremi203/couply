// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.2
// source: matching-service/v1/matching_service.proto

package matching_service

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateMatchV1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MainUserId    int64                  `protobuf:"varint,1,opt,name=main_user_id,json=mainUserId,proto3" json:"main_user_id,omitempty"`
	ChosenUserId  int64                  `protobuf:"varint,2,opt,name=chosen_user_id,json=chosenUserId,proto3" json:"chosen_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMatchV1Request) Reset() {
	*x = CreateMatchV1Request{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMatchV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchV1Request) ProtoMessage() {}

func (x *CreateMatchV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchV1Request.ProtoReflect.Descriptor instead.
func (*CreateMatchV1Request) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMatchV1Request) GetMainUserId() int64 {
	if x != nil {
		return x.MainUserId
	}
	return 0
}

func (x *CreateMatchV1Request) GetChosenUserId() int64 {
	if x != nil {
		return x.ChosenUserId
	}
	return 0
}

type CreateMatchV1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         *Match                 `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMatchV1Response) Reset() {
	*x = CreateMatchV1Response{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMatchV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMatchV1Response) ProtoMessage() {}

func (x *CreateMatchV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMatchV1Response.ProtoReflect.Descriptor instead.
func (*CreateMatchV1Response) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMatchV1Response) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type UpdateMatchV1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MainUserId    int64                  `protobuf:"varint,1,opt,name=main_user_id,json=mainUserId,proto3" json:"main_user_id,omitempty"`
	ChosenUserId  int64                  `protobuf:"varint,2,opt,name=chosen_user_id,json=chosenUserId,proto3" json:"chosen_user_id,omitempty"`
	Approved      bool                   `protobuf:"varint,3,opt,name=approved,proto3" json:"approved,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMatchV1Request) Reset() {
	*x = UpdateMatchV1Request{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMatchV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchV1Request) ProtoMessage() {}

func (x *UpdateMatchV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchV1Request.ProtoReflect.Descriptor instead.
func (*UpdateMatchV1Request) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateMatchV1Request) GetMainUserId() int64 {
	if x != nil {
		return x.MainUserId
	}
	return 0
}

func (x *UpdateMatchV1Request) GetChosenUserId() int64 {
	if x != nil {
		return x.ChosenUserId
	}
	return 0
}

func (x *UpdateMatchV1Request) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

type UpdateMatchV1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         *Match                 `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMatchV1Response) Reset() {
	*x = UpdateMatchV1Response{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMatchV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchV1Response) ProtoMessage() {}

func (x *UpdateMatchV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchV1Response.ProtoReflect.Descriptor instead.
func (*UpdateMatchV1Response) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateMatchV1Response) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type DeleteMatchV1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MainUserId    int64                  `protobuf:"varint,1,opt,name=main_user_id,json=mainUserId,proto3" json:"main_user_id,omitempty"`
	ChosenUserId  int64                  `protobuf:"varint,2,opt,name=chosen_user_id,json=chosenUserId,proto3" json:"chosen_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMatchV1Request) Reset() {
	*x = DeleteMatchV1Request{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMatchV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMatchV1Request) ProtoMessage() {}

func (x *DeleteMatchV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMatchV1Request.ProtoReflect.Descriptor instead.
func (*DeleteMatchV1Request) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteMatchV1Request) GetMainUserId() int64 {
	if x != nil {
		return x.MainUserId
	}
	return 0
}

func (x *DeleteMatchV1Request) GetChosenUserId() int64 {
	if x != nil {
		return x.ChosenUserId
	}
	return 0
}

type DeleteMatchV1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMatchV1Response) Reset() {
	*x = DeleteMatchV1Response{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMatchV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMatchV1Response) ProtoMessage() {}

func (x *DeleteMatchV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMatchV1Response.ProtoReflect.Descriptor instead.
func (*DeleteMatchV1Response) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{5}
}

type FetchMatchesV1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MainUserId    int64                  `protobuf:"varint,1,opt,name=main_user_id,json=mainUserId,proto3" json:"main_user_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchMatchesV1Request) Reset() {
	*x = FetchMatchesV1Request{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMatchesV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMatchesV1Request) ProtoMessage() {}

func (x *FetchMatchesV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMatchesV1Request.ProtoReflect.Descriptor instead.
func (*FetchMatchesV1Request) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{6}
}

func (x *FetchMatchesV1Request) GetMainUserId() int64 {
	if x != nil {
		return x.MainUserId
	}
	return 0
}

func (x *FetchMatchesV1Request) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FetchMatchesV1Request) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type FetchMatchesV1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         []*Match               `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchMatchesV1Response) Reset() {
	*x = FetchMatchesV1Response{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchMatchesV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchMatchesV1Response) ProtoMessage() {}

func (x *FetchMatchesV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchMatchesV1Response.ProtoReflect.Descriptor instead.
func (*FetchMatchesV1Response) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{7}
}

func (x *FetchMatchesV1Response) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type FetchIncomingMatchesV1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChosenUserId  int64                  `protobuf:"varint,1,opt,name=chosen_user_id,json=chosenUserId,proto3" json:"chosen_user_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchIncomingMatchesV1Request) Reset() {
	*x = FetchIncomingMatchesV1Request{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchIncomingMatchesV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchIncomingMatchesV1Request) ProtoMessage() {}

func (x *FetchIncomingMatchesV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchIncomingMatchesV1Request.ProtoReflect.Descriptor instead.
func (*FetchIncomingMatchesV1Request) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{8}
}

func (x *FetchIncomingMatchesV1Request) GetChosenUserId() int64 {
	if x != nil {
		return x.ChosenUserId
	}
	return 0
}

func (x *FetchIncomingMatchesV1Request) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FetchIncomingMatchesV1Request) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type FetchIncomingMatchesV1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         []*Match               `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchIncomingMatchesV1Response) Reset() {
	*x = FetchIncomingMatchesV1Response{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchIncomingMatchesV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchIncomingMatchesV1Response) ProtoMessage() {}

func (x *FetchIncomingMatchesV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchIncomingMatchesV1Response.ProtoReflect.Descriptor instead.
func (*FetchIncomingMatchesV1Response) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{9}
}

func (x *FetchIncomingMatchesV1Response) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type FetchOutgoingMatchesV1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MainUserId    int64                  `protobuf:"varint,1,opt,name=main_user_id,json=mainUserId,proto3" json:"main_user_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchOutgoingMatchesV1Request) Reset() {
	*x = FetchOutgoingMatchesV1Request{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchOutgoingMatchesV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOutgoingMatchesV1Request) ProtoMessage() {}

func (x *FetchOutgoingMatchesV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOutgoingMatchesV1Request.ProtoReflect.Descriptor instead.
func (*FetchOutgoingMatchesV1Request) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{10}
}

func (x *FetchOutgoingMatchesV1Request) GetMainUserId() int64 {
	if x != nil {
		return x.MainUserId
	}
	return 0
}

func (x *FetchOutgoingMatchesV1Request) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FetchOutgoingMatchesV1Request) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type FetchOutgoingMatchesV1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         []*Match               `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchOutgoingMatchesV1Response) Reset() {
	*x = FetchOutgoingMatchesV1Response{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchOutgoingMatchesV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchOutgoingMatchesV1Response) ProtoMessage() {}

func (x *FetchOutgoingMatchesV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchOutgoingMatchesV1Response.ProtoReflect.Descriptor instead.
func (*FetchOutgoingMatchesV1Response) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{11}
}

func (x *FetchOutgoingMatchesV1Response) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MainUserId    int64                  `protobuf:"varint,1,opt,name=main_user_id,json=mainUserId,proto3" json:"main_user_id,omitempty"`
	ChosenUserId  int64                  `protobuf:"varint,2,opt,name=chosen_user_id,json=chosenUserId,proto3" json:"chosen_user_id,omitempty"`
	Approved      bool                   `protobuf:"varint,3,opt,name=approved,proto3" json:"approved,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_matching_service_v1_matching_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_matching_service_v1_matching_service_proto_rawDescGZIP(), []int{12}
}

func (x *Match) GetMainUserId() int64 {
	if x != nil {
		return x.MainUserId
	}
	return 0
}

func (x *Match) GetChosenUserId() int64 {
	if x != nil {
		return x.ChosenUserId
	}
	return 0
}

func (x *Match) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

var File_matching_service_v1_matching_service_proto protoreflect.FileDescriptor

var file_matching_service_v1_matching_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e,
	0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x22, 0x3d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x68, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x0e, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x90, 0x01, 0x0a, 0x1d,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x0e, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x63, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x46,
	0x0a, 0x1e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56,
	0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x46, 0x0a, 0x1e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x6b, 0x0a,
	0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x6f, 0x73,
	0x65, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x32, 0x8d, 0x0d, 0x0a, 0x0f, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xeb,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31,
	0x12, 0x1d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9a, 0x01, 0x92, 0x41, 0x7b, 0x12, 0x1b, 0xd0, 0xa1, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0,
	0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x87,
	0xd0, 0xb0, 0x1a, 0x4b, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc,
	0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd0,
	0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd,
	0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x87, 0xd0, 0xb0, 0x62,
	0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x12, 0xf4, 0x01, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x12, 0x1d,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01,
	0x92, 0x41, 0x83, 0x01, 0x12, 0x1f, 0xd0, 0x9e, 0xd0, 0xb1, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1,
	0x82, 0xd1, 0x87, 0xd0, 0xb0, 0x1a, 0x4f, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb6,
	0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0x20,
	0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbc, 0xd1, 0x8d,
	0xd1, 0x82, 0xd1, 0x87, 0xd0, 0xb0, 0x62, 0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x56, 0x31, 0x12, 0xeb, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x56, 0x31, 0x12, 0x1d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x92, 0x41, 0x7b, 0x12, 0x1b, 0xd0, 0xa3, 0xd0, 0xb4,
	0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbc, 0xd1,
	0x8d, 0xd1, 0x82, 0xd1, 0x87, 0xd0, 0xb0, 0x1a, 0x4b, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0xd0, 0xb0,
	0xd0, 0xb6, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1,
	0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0,
	0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82,
	0xd1, 0x87, 0xd0, 0xb0, 0x62, 0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56,
	0x31, 0x12, 0x88, 0x02, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x56, 0x31, 0x12, 0x1e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb4, 0x01, 0x92, 0x41, 0x93, 0x01, 0x12, 0x27, 0xd0, 0xa1,
	0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb7,
	0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd1,
	0x87, 0xd0, 0xb5, 0xd0, 0xb9, 0x1a, 0x57, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb6,
	0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0x20,
	0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x85, 0xd1,
	0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0,
	0xb8, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb9, 0x62, 0x0f,
	0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x12, 0xca, 0x02, 0x0a,
	0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x12, 0x26, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x92, 0x41, 0xb5, 0x01, 0x12,
	0x38, 0xd0, 0xa1, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xb2, 0xd1, 0x85,
	0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x8f, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xbc, 0xd1,
	0x8d, 0xd1, 0x82, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb9, 0x1a, 0x68, 0xd0, 0x9f, 0xd1, 0x80, 0xd0,
	0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2,
	0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0,
	0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd0,
	0xbd, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1,
	0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x8f,
	0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x87, 0xd0,
	0xb5, 0xd0, 0xb9, 0x62, 0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x12, 0xce, 0x02, 0x0a, 0x16, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x56, 0x31, 0x12, 0x26, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x01, 0x92, 0x41, 0xb9, 0x01, 0x12, 0x3a, 0xd0, 0xa1,
	0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb7,
	0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x85, 0xd0,
	0xbe, 0xd0, 0xb4, 0xd1, 0x8f, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xbc, 0xd1, 0x8d,
	0xd1, 0x82, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb9, 0x1a, 0x6a, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0xd0,
	0xb0, 0xd0, 0xb6, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb,
	0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xbd,
	0xd1, 0x85, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86,
	0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1,
	0x8f, 0xd1, 0x89, 0xd0, 0xb8, 0xd1, 0x85, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x87,
	0xd0, 0xb5, 0xd0, 0xb9, 0x62, 0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x56, 0x31, 0x42, 0xb9, 0x03, 0x92, 0x41, 0xea,
	0x02, 0x12, 0xea, 0x01, 0x0a, 0x49, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xbe,
	0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1,
	0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x81,
	0xd1, 0x82, 0xd0, 0xb2, 0x2e, 0x20, 0xd0, 0xa1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb8,
	0xd1, 0x81, 0x20, 0xd0, 0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb9, 0x12,
	0x95, 0x01, 0xd0, 0xa1, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81, 0x20, 0xd0,
	0xbc, 0xd1, 0x8d, 0xd1, 0x82, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xb9, 0x20, 0xd0, 0xb4, 0xd0, 0xbb,
	0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0,
	0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x2c, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0,
	0xbe, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb2,
	0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0,
	0xb4, 0xd1, 0x8f, 0xd0, 0xbc, 0x20, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x82,
	0xd1, 0x8c, 0x20, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xb9, 0x20, 0xd0, 0xb4,
	0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
	0xbc, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x1a, 0x0e,
	0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x37, 0x30, 0x30, 0x31, 0x2a, 0x02,
	0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x43, 0x0a, 0x41, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x08, 0x02, 0x12, 0x21, 0xd0, 0xa2, 0xd0, 0xbe, 0xd0,
	0xba, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80,
	0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x1a, 0x0b, 0x78, 0x2d,
	0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x5a, 0x49, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x32, 0x30,
	0x33, 0x2f, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_matching_service_v1_matching_service_proto_rawDescOnce sync.Once
	file_matching_service_v1_matching_service_proto_rawDescData = file_matching_service_v1_matching_service_proto_rawDesc
)

func file_matching_service_v1_matching_service_proto_rawDescGZIP() []byte {
	file_matching_service_v1_matching_service_proto_rawDescOnce.Do(func() {
		file_matching_service_v1_matching_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_matching_service_v1_matching_service_proto_rawDescData)
	})
	return file_matching_service_v1_matching_service_proto_rawDescData
}

var file_matching_service_v1_matching_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_matching_service_v1_matching_service_proto_goTypes = []any{
	(*CreateMatchV1Request)(nil),           // 0: backend.CreateMatchV1Request
	(*CreateMatchV1Response)(nil),          // 1: backend.CreateMatchV1Response
	(*UpdateMatchV1Request)(nil),           // 2: backend.UpdateMatchV1Request
	(*UpdateMatchV1Response)(nil),          // 3: backend.UpdateMatchV1Response
	(*DeleteMatchV1Request)(nil),           // 4: backend.DeleteMatchV1Request
	(*DeleteMatchV1Response)(nil),          // 5: backend.DeleteMatchV1Response
	(*FetchMatchesV1Request)(nil),          // 6: backend.FetchMatchesV1Request
	(*FetchMatchesV1Response)(nil),         // 7: backend.FetchMatchesV1Response
	(*FetchIncomingMatchesV1Request)(nil),  // 8: backend.FetchIncomingMatchesV1Request
	(*FetchIncomingMatchesV1Response)(nil), // 9: backend.FetchIncomingMatchesV1Response
	(*FetchOutgoingMatchesV1Request)(nil),  // 10: backend.FetchOutgoingMatchesV1Request
	(*FetchOutgoingMatchesV1Response)(nil), // 11: backend.FetchOutgoingMatchesV1Response
	(*Match)(nil),                          // 12: backend.Match
}
var file_matching_service_v1_matching_service_proto_depIdxs = []int32{
	12, // 0: backend.CreateMatchV1Response.match:type_name -> backend.Match
	12, // 1: backend.UpdateMatchV1Response.match:type_name -> backend.Match
	12, // 2: backend.FetchMatchesV1Response.match:type_name -> backend.Match
	12, // 3: backend.FetchIncomingMatchesV1Response.match:type_name -> backend.Match
	12, // 4: backend.FetchOutgoingMatchesV1Response.match:type_name -> backend.Match
	0,  // 5: backend.MatchingService.CreateMatchV1:input_type -> backend.CreateMatchV1Request
	2,  // 6: backend.MatchingService.UpdateMatchV1:input_type -> backend.UpdateMatchV1Request
	4,  // 7: backend.MatchingService.DeleteMatchV1:input_type -> backend.DeleteMatchV1Request
	6,  // 8: backend.MatchingService.FetchMatchesV1:input_type -> backend.FetchMatchesV1Request
	8,  // 9: backend.MatchingService.FetchIncomingMatchesV1:input_type -> backend.FetchIncomingMatchesV1Request
	10, // 10: backend.MatchingService.FetchOutgoingMatchesV1:input_type -> backend.FetchOutgoingMatchesV1Request
	1,  // 11: backend.MatchingService.CreateMatchV1:output_type -> backend.CreateMatchV1Response
	3,  // 12: backend.MatchingService.UpdateMatchV1:output_type -> backend.UpdateMatchV1Response
	5,  // 13: backend.MatchingService.DeleteMatchV1:output_type -> backend.DeleteMatchV1Response
	7,  // 14: backend.MatchingService.FetchMatchesV1:output_type -> backend.FetchMatchesV1Response
	9,  // 15: backend.MatchingService.FetchIncomingMatchesV1:output_type -> backend.FetchIncomingMatchesV1Response
	11, // 16: backend.MatchingService.FetchOutgoingMatchesV1:output_type -> backend.FetchOutgoingMatchesV1Response
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_matching_service_v1_matching_service_proto_init() }
func file_matching_service_v1_matching_service_proto_init() {
	if File_matching_service_v1_matching_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_matching_service_v1_matching_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_matching_service_v1_matching_service_proto_goTypes,
		DependencyIndexes: file_matching_service_v1_matching_service_proto_depIdxs,
		MessageInfos:      file_matching_service_v1_matching_service_proto_msgTypes,
	}.Build()
	File_matching_service_v1_matching_service_proto = out.File
	file_matching_service_v1_matching_service_proto_rawDesc = nil
	file_matching_service_v1_matching_service_proto_goTypes = nil
	file_matching_service_v1_matching_service_proto_depIdxs = nil
}
