// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: search-service/v1/search_service.proto

package search_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	user_service "github.com/Doremi203/Couply/backend/pkg/user-service/v1"
	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateFilterV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFilterV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFilterV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFilterV1RequestMultiError, or nil if none found.
func (m *CreateFilterV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFilterV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := GenderPriority_name[int32(m.GetGenderPriority())]; !ok {
		err := CreateFilterV1RequestValidationError{
			field:  "GenderPriority",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxAge() < 18 {
		err := CreateFilterV1RequestValidationError{
			field:  "MaxAge",
			reason: "value must be greater than or equal to 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDistance(); val < 0 || val > 99 {
		err := CreateFilterV1RequestValidationError{
			field:  "Distance",
			reason: "value must be inside range [0, 99]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := user_service.Goal_name[int32(m.GetGoal())]; !ok {
		err := CreateFilterV1RequestValidationError{
			field:  "Goal",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSearchTape()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFilterV1RequestValidationError{
					field:  "SearchTape",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFilterV1RequestValidationError{
					field:  "SearchTape",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchTape()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFilterV1RequestValidationError{
				field:  "SearchTape",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInterest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFilterV1RequestValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFilterV1RequestValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFilterV1RequestValidationError{
				field:  "Interest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFilterV1RequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFilterV1RequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFilterV1RequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFilterV1RequestMultiError(errors)
	}

	return nil
}

// CreateFilterV1RequestMultiError is an error wrapping multiple validation
// errors returned by CreateFilterV1Request.ValidateAll() if the designated
// constraints aren't met.
type CreateFilterV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFilterV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFilterV1RequestMultiError) AllErrors() []error { return m }

// CreateFilterV1RequestValidationError is the validation error returned by
// CreateFilterV1Request.Validate if the designated constraints aren't met.
type CreateFilterV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFilterV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFilterV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFilterV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFilterV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFilterV1RequestValidationError) ErrorName() string {
	return "CreateFilterV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFilterV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFilterV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFilterV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFilterV1RequestValidationError{}

// Validate checks the field values on CreateFilterV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFilterV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFilterV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFilterV1ResponseMultiError, or nil if none found.
func (m *CreateFilterV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFilterV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFilterV1ResponseValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFilterV1ResponseValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFilterV1ResponseValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFilterV1ResponseMultiError(errors)
	}

	return nil
}

// CreateFilterV1ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFilterV1Response.ValidateAll() if the designated
// constraints aren't met.
type CreateFilterV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFilterV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFilterV1ResponseMultiError) AllErrors() []error { return m }

// CreateFilterV1ResponseValidationError is the validation error returned by
// CreateFilterV1Response.Validate if the designated constraints aren't met.
type CreateFilterV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFilterV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFilterV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFilterV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFilterV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFilterV1ResponseValidationError) ErrorName() string {
	return "CreateFilterV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFilterV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFilterV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFilterV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFilterV1ResponseValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GenderPriority

	// no validation rules for MaxAge

	// no validation rules for Distance

	// no validation rules for Goal

	if all {
		switch v := interface{}(m.GetSearchTape()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "SearchTape",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "SearchTape",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchTape()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterValidationError{
				field:  "SearchTape",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInterest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterValidationError{
				field:  "Interest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on SearchTape with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchTape) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchTape with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchTapeMultiError, or
// nil if none found.
func (m *SearchTape) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchTape) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OnlyVerified

	// no validation rules for OnlyPremium

	if len(errors) > 0 {
		return SearchTapeMultiError(errors)
	}

	return nil
}

// SearchTapeMultiError is an error wrapping multiple validation errors
// returned by SearchTape.ValidateAll() if the designated constraints aren't met.
type SearchTapeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchTapeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchTapeMultiError) AllErrors() []error { return m }

// SearchTapeValidationError is the validation error returned by
// SearchTape.Validate if the designated constraints aren't met.
type SearchTapeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchTapeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchTapeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchTapeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchTapeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchTapeValidationError) ErrorName() string { return "SearchTapeValidationError" }

// Error satisfies the builtin error interface
func (e SearchTapeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchTape.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchTapeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchTapeValidationError{}

// Validate checks the field values on Info with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Info) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Info with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InfoMultiError, or nil if none found.
func (m *Info) ValidateAll() error {
	return m.validate(true)
}

func (m *Info) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMinHeight() <= 0 {
		err := InfoValidationError{
			field:  "MinHeight",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxHeight() >= 220 {
		err := InfoValidationError{
			field:  "MaxHeight",
			reason: "value must be less than 220",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := user_service.Zodiac_name[int32(m.GetZodiac())]; !ok {
		err := InfoValidationError{
			field:  "Zodiac",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := user_service.Education_name[int32(m.GetEducation())]; !ok {
		err := InfoValidationError{
			field:  "Education",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := user_service.Children_name[int32(m.GetChildren())]; !ok {
		err := InfoValidationError{
			field:  "Children",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := user_service.Alcohol_name[int32(m.GetAlcohol())]; !ok {
		err := InfoValidationError{
			field:  "Alcohol",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := user_service.Smoking_name[int32(m.GetSmoking())]; !ok {
		err := InfoValidationError{
			field:  "Smoking",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InfoMultiError(errors)
	}

	return nil
}

// InfoMultiError is an error wrapping multiple validation errors returned by
// Info.ValidateAll() if the designated constraints aren't met.
type InfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoMultiError) AllErrors() []error { return m }

// InfoValidationError is the validation error returned by Info.Validate if the
// designated constraints aren't met.
type InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoValidationError) ErrorName() string { return "InfoValidationError" }

// Error satisfies the builtin error interface
func (e InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoValidationError{}
