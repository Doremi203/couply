syntax = "proto3";

package matching_service.v1;

option go_package = "github.com/Doremi203/couply/backend/matcher/gen/api/matching-service;matching_service";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Приложение для знакомств. Сервис мэтчей";
    version: "1.0.0";
    description: "Сервис мэтчей для приложения, которое позволяет людям искать людей для знакомств";
  };
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "api-token";
      value: {
        in: IN_HEADER;
        type: TYPE_API_KEY;
        name: "x-api-token";
        description: "Токен авторизации";
      }
    }
  }
};

service MatchingService {
  rpc LikeUserV1 (LikeUserV1Request) returns (LikeUserV1Response) {
    option (google.api.http) = {
      post: "/v1/LikeUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Лайк пользователя";
      description: "Отправка лайка другому пользователю. Если лайк взаимный - создается мэтч";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }

  rpc DislikeUserV1 (DislikeUserV1Request) returns (DislikeUserV1Response) {
    option (google.api.http) = {
      post: "/v1/DislikeUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Дизлайк пользователя";
      description: "Отправка дизлайка другому пользователю";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }

  rpc FetchMatchesUserIDsV1 (FetchMatchesUserIDsV1Request) returns (FetchMatchesUserIDsV1Response) {
    option (google.api.http) = {
      post: "/v1/FetchMatchesUserIDsV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение мэтчей";
      description: "Получение списка айди юзеров с взаимными мэтчами";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }

  rpc FetchOutgoingLikesV1 (FetchOutgoingLikesV1Request) returns (FetchOutgoingLikesV1Response) {
    option (google.api.http) = {
      post: "/v1/FetchOutgoingLikesV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение лайкнутых пользователей";
      description: "Получение списка лайков сделанных текущим пользователем";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }

  rpc FetchIncomingLikesV1 (FetchIncomingLikesV1Request) returns (FetchIncomingLikesV1Response) {
    option (google.api.http) = {
      post: "/v1/FetchIncomingLikesV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение лайкнувших пользователей";
      description: "Получение списка входящих текущему пользователю лайков";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }
}

message LikeUserV1Request {
  string target_user_id = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string message = 2 [
    (validate.rules).string = {
      max_len: 200,
      ignore_empty: true
    }
  ];
}

message LikeUserV1Response {
  bool is_match = 1; // true если лайк взаимный
  Match match = 2;   // Данные мэтча (только если is_match = true)
}

message DislikeUserV1Request {
  string target_user_id = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message DislikeUserV1Response {}

message FetchMatchesUserIDsV1Request {
  uint64 limit = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).uint64.gt = 0
  ];
  uint64 offset = 2 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).uint64.gte = 0
  ];
}

message FetchMatchesUserIDsV1Response {
  repeated string user_ids = 1;
}

message FetchOutgoingLikesV1Request {
  uint64 limit = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).uint64.gt = 0
  ];
  uint64 offset = 2 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).uint64.gte = 0
  ];
}

message FetchOutgoingLikesV1Response {
  repeated Like likes = 1;
}

message FetchIncomingLikesV1Request {
  uint64 limit = 1 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).uint64.gt = 0
  ];
  uint64 offset = 2 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).uint64.gte = 0
  ];
}

message FetchIncomingLikesV1Response {
  repeated Like likes = 1;
}

message Like {
  string sender_id = 1;
  string receiver_id = 2;
  string message = 3;
  Status status = 4;
}

message Match {
  string first_user_id = 1;
  string second_user_id = 2;
  google.protobuf.Timestamp created_at = 3;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_WAITING = 1;
  STATUS_ACCEPTED = 2;
  STATUS_DECLINED = 3;
}