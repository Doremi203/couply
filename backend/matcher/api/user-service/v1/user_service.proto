syntax = "proto3";

package matcher;

option go_package = "github.com/Doremi203/couply/backend/matcher/api/user-service/v1";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Приложение для знакомств. Сервис пользователей";
    version: "1.0.0";
    description: "Сервис пользователей для приложения, которое позволяет людям искать людей для знакомств";
  };
  host: "127.0.0.1:7001";
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "api-token";
      value: {
        in: IN_HEADER;
        type: TYPE_API_KEY;
        name: "x-api-token";
        description: "Токен авторизации";
      }
    }
  }
};

service UserService {
  rpc CreateUserV1 (CreateUserV1Request) returns (CreateUserV1Response) {
    option (google.api.http) = {
      post: "/v1/CreateUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Создание пользователя";
      description: "Принимает важные поля для создания пользователя";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }

  rpc UpdateUserV1 (UpdateUserV1Request) returns (UpdateUserV1Response) {
    option (google.api.http) = {
      post: "/v1/UpdateUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Обновление пользователя";
      description: "Принимает важные поля для обновления пользователя";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }

  rpc DeleteUserV1 (DeleteUserV1Request) returns (DeleteUserV1Response) {
    option (google.api.http) = {
      post: "/v1/DeleteUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Удаление пользователя";
      description: "Принимает айди пользователя для полного удаления";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }

  rpc GetUserV1 (GetUserV1Request) returns (GetUserV1Response) {
    option (google.api.http) = {
      post: "/v1/GetUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение пользователя";
      description: "Принимает айди пользователя для получения его данных";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
      }
    };
  }
}

message CreateUserV1Request {
  string name = 1 [
    (validate.rules).string.min_len = 2,
    (google.api.field_behavior) = REQUIRED
  ];
  int32 age = 2 [
    (validate.rules).int32.gte = 18,
    (google.api.field_behavior) = REQUIRED
  ];
  Gender gender = 3 [
    (validate.rules).enum.defined_only = true,
    (google.api.field_behavior) = REQUIRED
  ];
  string location = 4 [
    (validate.rules).string.min_len = 2,
    (google.api.field_behavior) = REQUIRED
  ];
  string bio = 5 [
    (validate.rules).string.min_len = 2
  ];
  Goal goal = 6 [
    (validate.rules).enum.defined_only = true
  ];
  Interest interest = 7;
  Zodiac zodiac = 8 [
    (validate.rules).enum.defined_only = true
  ];
  int32 height = 9 [
    (validate.rules).int32.gt = 0
  ];
  Education education = 10 [
    (validate.rules).enum.defined_only = true
  ];
  Children children = 11 [
    (validate.rules).enum.defined_only = true
  ];
  Alcohol alcohol = 12 [
    (validate.rules).enum.defined_only = true
  ];
  Smoking smoking = 13 [
    (validate.rules).enum.defined_only = true
  ];
  bool hidden = 14 [
    (google.api.field_behavior) = REQUIRED
  ];
  bool verified = 15 [
    (google.api.field_behavior) = REQUIRED
  ];
  repeated Photo photos = 16;
}

message CreateUserV1Response {
  User user = 1;
}

message UpdateUserV1Request {
  int64 id = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string name = 2 [
    (validate.rules).string.min_len = 2
  ];
  int32 age = 3 [
    (validate.rules).int32.gt = 18
  ];
  Gender gender = 4 [
    (validate.rules).enum.defined_only = true
  ];
  string location = 5 [
    (validate.rules).string.min_len = 2
  ];
  string bio = 6 [
    (validate.rules).string.min_len = 2
  ];
  Goal goal = 7 [
    (validate.rules).enum.defined_only = true
  ];
  Interest interest = 8;
  Zodiac zodiac = 9 [
    (validate.rules).enum.defined_only = true
  ];
  int32 height = 10 [
    (validate.rules).int32.gt = 0
  ];
  Education education = 11 [
    (validate.rules).enum.defined_only = true
  ];
  Children children = 12 [
    (validate.rules).enum.defined_only = true
  ];
  Alcohol alcohol = 13 [
    (validate.rules).enum.defined_only = true
  ];
  Smoking smoking = 14 [
    (validate.rules).enum.defined_only = true
  ];
  bool hidden = 15;
  bool verified = 16;
  repeated Photo photos = 17;
}

message UpdateUserV1Response {
  User user = 1;
}

message DeleteUserV1Request {
  int64 id = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message DeleteUserV1Response {

}

message GetUserV1Request {
  int64 id = 1;
}

message GetUserV1Response {
  User user = 1;
}

message User {
  int64 id = 1;
  string name = 2;
  int32 age = 3;
  Gender gender = 4;
  string location = 5;
  string bio = 6;
  Goal goal = 7;
  Interest interest = 8;
  Zodiac zodiac = 9;
  int32 height = 10;
  Education education = 11;
  Children children = 12;
  Alcohol alcohol = 13;
  Smoking smoking = 14;
  bool hidden = 15;
  bool verified = 16;
  repeated Photo photos = 17;
  google.protobuf.Timestamp created_at = 18;
  google.protobuf.Timestamp updated_at = 19;
}

message Photo {
  int32 order_number = 1;
  string url = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
  string mime_type = 3 [
    (google.api.field_behavior) = REQUIRED
  ];
  google.protobuf.Timestamp uploaded_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

enum Gender {
  GENDER_UNSPECIFIED = 0;
  GENDER_MALE = 1;
  GENDER_FEMALE = 2;
}

enum Goal {
  GOAL_UNSPECIFIED = 0;
  GOAL_DATING = 1;
  GOAL_RELATIONSHIP = 2;
  GOAL_FRIENDSHIP = 3;
  GOAL_JUST_CHATTING = 4;
}

message Interest {
  repeated Sport sport = 1 [
    (validate.rules).repeated.items.enum.defined_only = true
  ];
  repeated Selfdevelopment selfdevelopment = 2 [
    (validate.rules).repeated.items.enum.defined_only = true
  ];
  repeated Art art = 3 [
    (validate.rules).repeated.items.enum.defined_only = true
  ];
  repeated Social social = 4 [
    (validate.rules).repeated.items.enum.defined_only = true
  ];
  repeated Hobby hobby = 5 [
    (validate.rules).repeated.items.enum.defined_only = true
  ];
  repeated Gastronomy gastronomy = 6 [
    (validate.rules).repeated.items.enum.defined_only = true
  ];
}

enum Sport {
  SPORT_UNSPECIFIED = 0;
  SPORT_RUNNING = 1;
  SPORT_SWIMMING = 2;
  SPORT_YOGA = 3;
  SPORT_BYCICLE = 4;
  SPORT_GYM = 5;
  SPORT_SKIING = 6;
  SPORT_SNOWBOARDING = 7;
  SPORT_DANCING = 8;
  SPORT_MARTIAL_ARTS = 9;
  SPORT_SURFING = 10;
  SPORT_HIKING = 11;
  SPORT_TENNIS = 12;
  SPORT_CLIMBING = 13;
}

enum Selfdevelopment {
  SELFDEVELOPMENT_UNSPECIFIED = 0;
  SELFDEVELOPMENT_LANGUAGES = 1;
  SELFDEVELOPMENT_LECTURES = 2;
  SELFDEVELOPMENT_ONLINE_COURSES = 3;
  SELFDEVELOPMENT_SELF_EDUCATION = 4;
  SELFDEVELOPMENT_MEDITATION = 5;
  SELFDEVELOPMENT_PSYCHOLOGY = 6;
  SELFDEVELOPMENT_PHILOSOPHY = 7;
  SELFDEVELOPMENT_HISTORY = 8;
  SELFDEVELOPMENT_TECHNOLOGY = 9;
  SELFDEVELOPMENT_READING = 10;
}

enum Art {
  ART_UNSPECIFIED = 0;
  ART_PAINTING = 1;
  ART_PHOTOGRAPH = 2;
  ART_MUSIC = 3;
  ART_SINGING = 4;
  ART_WRITING = 5;
  ART_SCULPTURE = 6;
  ART_THEATER = 7;
  ART_CINEMA = 8;
  ART_NEEDLEWORK = 9;
}

enum Social {
  SOCIAL_UNSPECIFIED = 0;
  SOCIAL_VOLUNTEERING = 1;
  SOCIAL_CHARITY = 2;
  SOCIAL_ECO_ACTIVISM = 3;
  SOCIAL_ELDERLY_CARE = 4;
  SOCIAL_CHILDCARE = 5;
  SOCIAL_ANIMAL_WELFARE = 6;
}

enum Hobby {
  HOBBY_UNSPECIFIED = 0;
  HOBBY_LITERATURE = 1;
  HOBBY_VIDEO_GAMES = 2;
  HOBBY_BOARD_GAMES = 3;
  HOBBY_TRAVELS = 4;
  HOBBY_PLANT_CULTIVATION = 5;
  HOBBY_FISHING = 6;
  HOBBY_DOG_WALKS = 7;
  HOBBY_CATS_LOVER = 8;
  HOBBY_CARS_AND_MOTORCYCLES = 9;
  HOBBY_CONCERTS = 10;
}

enum Gastronomy {
  GASTRONOMY_UNSPECIFIED = 0;
  GASTRONOMY_COOKING = 1;
  GASTRONOMY_WINE_DEGUSTATION = 2;
  GASTRONOMY_BARS = 3;
  GASTRONOMY_COFFEE = 4;
  GASTRONOMY_TEA = 5;
  GASTRONOMY_VEGAN = 6;
  GASTRONOMY_FOOD_CRITIC = 7;
  GASTRONOMY_SUGAR_LOVER = 8;
}

enum Zodiac {
  ZODIAC_UNSPECIFIED = 0;
  ZODIAC_ARIES = 1;
  ZODIAC_TAURUS = 2;
  ZODIAC_GEMINI = 3;
  ZODIAC_CANCER = 4;
  ZODIAC_LEO = 5;
  ZODIAC_VIRGO = 6;
  ZODIAC_LIBRA = 7;
  ZODIAC_SCORPIO = 8;
  ZODIAC_SAGITTARIUS = 9;
  ZODIAC_CAPRICORN = 10;
  ZODIAC_AQUARIUS = 11;
  ZODIAC_PISCES = 12;
}

enum Education {
  EDUCATION_UNSPECIFIED = 0;
  EDUCATION_SECONDARY = 1;
  EDUCATION_HIGHER = 2;
  EDUCATION_PHD = 3;
}

enum Children {
  CHILDREN_UNSPECIFIED = 0;
  CHILDREN_NO = 1;
  CHILDREN_NOT_YET = 2;
  CHILDREN_YES = 3;
}

enum Alcohol {
  ALCOHOL_UNSPECIFIED = 0;
  ALCOHOL_NEGATIVELY = 1;
  ALCOHOL_NEUTRALLY = 2;
  ALCOHOL_POSITIVELY = 3;
}

enum Smoking {
  SMOKING_UNSPECIFIED = 0;
  SMOKING_NEGATIVELY = 1;
  SMOKING_NEUTRALLY = 2;
  SMOKING_POSITIVELY = 3;
}