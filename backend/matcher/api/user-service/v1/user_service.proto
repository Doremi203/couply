syntax = "proto3";

package user_service.v1;

option go_package = "github.com/Doremi203/couply/backend/matcher/gen/api/user-service/v1;user_service";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "api/common/v1/common.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Приложение для знакомств. Сервис пользователей";
    version: "1.0.0";
    description: "Сервис пользователей для приложения, которое позволяет людям искать людей для знакомств";
  };
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "api-token";
      value: {
        in: IN_HEADER;
        type: TYPE_API_KEY;
        name: "x-api-token";
        description: "Токен авторизации";
      }
    }
    security: {
      key: "user-token";
      value: {
        in: IN_HEADER;
        type: TYPE_BASIC;
        name: "user-token";
        description: "Токен пользователя для идентификации";
      }
    }
  }
};

service UserService {
  rpc CreateUserV1 (CreateUserV1Request) returns (CreateUserV1Response) {
    option (google.api.http) = {
      post: "/v1/CreateUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Создание пользователя";
      description: "Принимает важные поля для создания пользователя";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
        security_requirement: {
          key: "user-token";
          value: {};
        }
      }
    };
  }

  rpc UpdateUserV1 (UpdateUserV1Request) returns (UpdateUserV1Response) {
    option (google.api.http) = {
      post: "/v1/UpdateUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Обновление пользователя";
      description: "Принимает важные поля для обновления пользователя";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
        security_requirement: {
          key: "user-token";
          value: {};
        }
      }
    };
  }

  rpc DeleteUserV1 (DeleteUserV1Request) returns (DeleteUserV1Response) {
    option (google.api.http) = {
      post: "/v1/DeleteUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Удаление пользователя";
      description: "Принимает айди пользователя для полного удаления";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
        security_requirement: {
          key: "user-token";
          value: {};
        }
      }
    };
  }

  rpc GetUserV1 (GetUserV1Request) returns (GetUserV1Response) {
    option (google.api.http) = {
      post: "/v1/GetUserV1"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Получение пользователя";
      description: "Принимает айди пользователя для получения его данных";
      security: {
        security_requirement: {
          key: "api-token";
          value: {};
        }
        security_requirement: {
          key: "user-token";
          value: {};
        }
      }
    };
  }
}

message CreateUserV1Request {
  string name = 1 [
    (validate.rules).string.min_len = 2,
    (google.api.field_behavior) = REQUIRED
  ];
  int32 age = 2 [
    (validate.rules).int32.gte = 18,
    (google.api.field_behavior) = REQUIRED
  ];
  Gender gender = 3 [
    (validate.rules).enum.defined_only = true,
    (google.api.field_behavior) = REQUIRED
  ];
  string location = 4 [
    (validate.rules).string.min_len = 2,
    (google.api.field_behavior) = REQUIRED
  ];
  string bio = 5 [
    (validate.rules).string.min_len = 2
  ];
  common.v1.Goal goal = 6 [
    (validate.rules).enum.defined_only = true
  ];
  common.v1.Interest interest = 7;
  common.v1.Zodiac zodiac = 8 [
    (validate.rules).enum.defined_only = true
  ];
  int32 height = 9 [
    (google.api.field_behavior) = REQUIRED,
    (validate.rules).int32.gt = 0
  ];
  common.v1.Education education = 10 [
    (validate.rules).enum.defined_only = true
  ];
  common.v1.Children children = 11 [
    (validate.rules).enum.defined_only = true
  ];
  common.v1.Alcohol alcohol = 12 [
    (validate.rules).enum.defined_only = true
  ];
  common.v1.Smoking smoking = 13 [
    (validate.rules).enum.defined_only = true
  ];
  bool hidden = 14 [
    (google.api.field_behavior) = REQUIRED
  ];
  bool verified = 15 [
    (google.api.field_behavior) = REQUIRED
  ];
  repeated Photo photos = 16;
}

message CreateUserV1Response {
  User user = 1;
}

message UpdateUserV1Request {
  string name = 1 [
    (validate.rules).string.min_len = 2
  ];
  int32 age = 2 [
    (validate.rules).int32.gte = 18
  ];
  Gender gender = 3 [
    (validate.rules).enum.defined_only = true
  ];
  string location = 4 [
    (validate.rules).string.min_len = 2
  ];
  string bio = 5 [
    (validate.rules).string.min_len = 2
  ];
  common.v1.Goal goal = 6 [
    (validate.rules).enum.defined_only = true
  ];
  common.v1.Interest interest = 7;
  common.v1.Zodiac zodiac = 8 [
    (validate.rules).enum.defined_only = true
  ];
  int32 height = 9 [
    (validate.rules).int32.gt = 0
  ];
  common.v1.Education education = 10 [
    (validate.rules).enum.defined_only = true
  ];
  common.v1.Children children = 11 [
    (validate.rules).enum.defined_only = true
  ];
  common.v1.Alcohol alcohol = 12 [
    (validate.rules).enum.defined_only = true
  ];
  common.v1.Smoking smoking = 13 [
    (validate.rules).enum.defined_only = true
  ];
  bool hidden = 14;
  bool verified = 15;
  repeated Photo photos = 16;
}

message UpdateUserV1Response {
  User user = 1;
}

message DeleteUserV1Request {
}

message DeleteUserV1Response {
}

message GetUserV1Request {
}

message GetUserV1Response {
  User user = 1;
}

message User {
  string id = 1;
  string name = 2;
  int32 age = 3;
  Gender gender = 4;
  string location = 5;
  string bio = 6;
  common.v1.Goal goal = 7;
  common.v1.Interest interest = 8;
  common.v1.Zodiac zodiac = 9;
  int32 height = 10;
  common.v1.Education education = 11;
  common.v1.Children children = 12;
  common.v1.Alcohol alcohol = 13;
  common.v1.Smoking smoking = 14;
  bool hidden = 15;
  bool verified = 16;
  repeated Photo photos = 17;
  google.protobuf.Timestamp created_at = 18;
  google.protobuf.Timestamp updated_at = 19;
}

message Photo {
  int32 order_number = 1;
  string url = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
  string mime_type = 3 [
    (google.api.field_behavior) = REQUIRED
  ];
  google.protobuf.Timestamp uploaded_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

enum Gender {
  GENDER_UNSPECIFIED = 0;
  GENDER_MALE = 1;
  GENDER_FEMALE = 2;
}