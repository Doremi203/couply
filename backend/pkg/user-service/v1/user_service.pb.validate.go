// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user-service/v1/user_service.proto

package user_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateUserV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserV1RequestMultiError, or nil if none found.
func (m *CreateUserV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := CreateUserV1RequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAge() <= 18 {
		err := CreateUserV1RequestValidationError{
			field:  "Age",
			reason: "value must be greater than 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Gender_name[int32(m.GetGender())]; !ok {
		err := CreateUserV1RequestValidationError{
			field:  "Gender",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLocation()) < 2 {
		err := CreateUserV1RequestValidationError{
			field:  "Location",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBio()) < 2 {
		err := CreateUserV1RequestValidationError{
			field:  "Bio",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Goal_name[int32(m.GetGoal())]; !ok {
		err := CreateUserV1RequestValidationError{
			field:  "Goal",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInterest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserV1RequestValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserV1RequestValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserV1RequestValidationError{
				field:  "Interest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := Zodiac_name[int32(m.GetZodiac())]; !ok {
		err := CreateUserV1RequestValidationError{
			field:  "Zodiac",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetHeight() <= 0 {
		err := CreateUserV1RequestValidationError{
			field:  "Height",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Education_name[int32(m.GetEducation())]; !ok {
		err := CreateUserV1RequestValidationError{
			field:  "Education",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Children_name[int32(m.GetChildren())]; !ok {
		err := CreateUserV1RequestValidationError{
			field:  "Children",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Alcohol_name[int32(m.GetAlcohol())]; !ok {
		err := CreateUserV1RequestValidationError{
			field:  "Alcohol",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Smoking_name[int32(m.GetSmoking())]; !ok {
		err := CreateUserV1RequestValidationError{
			field:  "Smoking",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hidden

	// no validation rules for Verified

	for idx, item := range m.GetPhotos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserV1RequestValidationError{
						field:  fmt.Sprintf("Photos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserV1RequestValidationError{
						field:  fmt.Sprintf("Photos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserV1RequestValidationError{
					field:  fmt.Sprintf("Photos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateUserV1RequestMultiError(errors)
	}

	return nil
}

// CreateUserV1RequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserV1Request.ValidateAll() if the designated
// constraints aren't met.
type CreateUserV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserV1RequestMultiError) AllErrors() []error { return m }

// CreateUserV1RequestValidationError is the validation error returned by
// CreateUserV1Request.Validate if the designated constraints aren't met.
type CreateUserV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserV1RequestValidationError) ErrorName() string {
	return "CreateUserV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserV1RequestValidationError{}

// Validate checks the field values on CreateUserV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserV1ResponseMultiError, or nil if none found.
func (m *CreateUserV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserV1ResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserV1ResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserV1ResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserV1ResponseMultiError(errors)
	}

	return nil
}

// CreateUserV1ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateUserV1Response.ValidateAll() if the designated
// constraints aren't met.
type CreateUserV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserV1ResponseMultiError) AllErrors() []error { return m }

// CreateUserV1ResponseValidationError is the validation error returned by
// CreateUserV1Response.Validate if the designated constraints aren't met.
type CreateUserV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserV1ResponseValidationError) ErrorName() string {
	return "CreateUserV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserV1ResponseValidationError{}

// Validate checks the field values on UpdateUserV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserV1Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserV1RequestMultiError, or nil if none found.
func (m *UpdateUserV1Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserV1Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := UpdateUserV1RequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAge() <= 18 {
		err := UpdateUserV1RequestValidationError{
			field:  "Age",
			reason: "value must be greater than 18",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Gender_name[int32(m.GetGender())]; !ok {
		err := UpdateUserV1RequestValidationError{
			field:  "Gender",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLocation()) < 2 {
		err := UpdateUserV1RequestValidationError{
			field:  "Location",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBio()) < 2 {
		err := UpdateUserV1RequestValidationError{
			field:  "Bio",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Goal_name[int32(m.GetGoal())]; !ok {
		err := UpdateUserV1RequestValidationError{
			field:  "Goal",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInterest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserV1RequestValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserV1RequestValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserV1RequestValidationError{
				field:  "Interest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := Zodiac_name[int32(m.GetZodiac())]; !ok {
		err := UpdateUserV1RequestValidationError{
			field:  "Zodiac",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetHeight() <= 0 {
		err := UpdateUserV1RequestValidationError{
			field:  "Height",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Education_name[int32(m.GetEducation())]; !ok {
		err := UpdateUserV1RequestValidationError{
			field:  "Education",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Children_name[int32(m.GetChildren())]; !ok {
		err := UpdateUserV1RequestValidationError{
			field:  "Children",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Alcohol_name[int32(m.GetAlcohol())]; !ok {
		err := UpdateUserV1RequestValidationError{
			field:  "Alcohol",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Smoking_name[int32(m.GetSmoking())]; !ok {
		err := UpdateUserV1RequestValidationError{
			field:  "Smoking",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hidden

	// no validation rules for Verified

	for idx, item := range m.GetPhotos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserV1RequestValidationError{
						field:  fmt.Sprintf("Photos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserV1RequestValidationError{
						field:  fmt.Sprintf("Photos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserV1RequestValidationError{
					field:  fmt.Sprintf("Photos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateUserV1RequestMultiError(errors)
	}

	return nil
}

// UpdateUserV1RequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserV1Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserV1RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserV1RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserV1RequestMultiError) AllErrors() []error { return m }

// UpdateUserV1RequestValidationError is the validation error returned by
// UpdateUserV1Request.Validate if the designated constraints aren't met.
type UpdateUserV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserV1RequestValidationError) ErrorName() string {
	return "UpdateUserV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserV1RequestValidationError{}

// Validate checks the field values on UpdateUserV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserV1Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserV1ResponseMultiError, or nil if none found.
func (m *UpdateUserV1Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserV1Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserV1ResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserV1ResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserV1ResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserV1ResponseMultiError(errors)
	}

	return nil
}

// UpdateUserV1ResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserV1Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserV1ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserV1ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserV1ResponseMultiError) AllErrors() []error { return m }

// UpdateUserV1ResponseValidationError is the validation error returned by
// UpdateUserV1Response.Validate if the designated constraints aren't met.
type UpdateUserV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserV1ResponseValidationError) ErrorName() string {
	return "UpdateUserV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserV1ResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Age

	// no validation rules for Gender

	// no validation rules for Location

	// no validation rules for Bio

	// no validation rules for Goal

	if all {
		switch v := interface{}(m.GetInterest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Interest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Interest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Zodiac

	// no validation rules for Height

	// no validation rules for Education

	// no validation rules for Children

	// no validation rules for Alcohol

	// no validation rules for Smoking

	// no validation rules for Hidden

	// no validation rules for Verified

	for idx, item := range m.GetPhotos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Photos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Photos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("Photos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Photo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Photo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Photo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PhotoMultiError, or nil if none found.
func (m *Photo) ValidateAll() error {
	return m.validate(true)
}

func (m *Photo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Url

	// no validation rules for MimeType

	if all {
		switch v := interface{}(m.GetUploadedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PhotoValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PhotoValidationError{
					field:  "UploadedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUploadedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhotoValidationError{
				field:  "UploadedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PhotoMultiError(errors)
	}

	return nil
}

// PhotoMultiError is an error wrapping multiple validation errors returned by
// Photo.ValidateAll() if the designated constraints aren't met.
type PhotoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhotoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhotoMultiError) AllErrors() []error { return m }

// PhotoValidationError is the validation error returned by Photo.Validate if
// the designated constraints aren't met.
type PhotoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhotoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhotoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhotoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhotoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhotoValidationError) ErrorName() string { return "PhotoValidationError" }

// Error satisfies the builtin error interface
func (e PhotoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhotoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhotoValidationError{}

// Validate checks the field values on Interest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Interest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Interest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InterestMultiError, or nil
// if none found.
func (m *Interest) ValidateAll() error {
	return m.validate(true)
}

func (m *Interest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSport() {
		_, _ = idx, item

		if _, ok := Sport_name[int32(item)]; !ok {
			err := InterestValidationError{
				field:  fmt.Sprintf("Sport[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetSelfdevelopment() {
		_, _ = idx, item

		if _, ok := Selfdevelopment_name[int32(item)]; !ok {
			err := InterestValidationError{
				field:  fmt.Sprintf("Selfdevelopment[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetArt() {
		_, _ = idx, item

		if _, ok := Art_name[int32(item)]; !ok {
			err := InterestValidationError{
				field:  fmt.Sprintf("Art[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetSocial() {
		_, _ = idx, item

		if _, ok := Social_name[int32(item)]; !ok {
			err := InterestValidationError{
				field:  fmt.Sprintf("Social[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetHobby() {
		_, _ = idx, item

		if _, ok := Hobby_name[int32(item)]; !ok {
			err := InterestValidationError{
				field:  fmt.Sprintf("Hobby[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetGastronomy() {
		_, _ = idx, item

		if _, ok := Gastronomy_name[int32(item)]; !ok {
			err := InterestValidationError{
				field:  fmt.Sprintf("Gastronomy[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return InterestMultiError(errors)
	}

	return nil
}

// InterestMultiError is an error wrapping multiple validation errors returned
// by Interest.ValidateAll() if the designated constraints aren't met.
type InterestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InterestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InterestMultiError) AllErrors() []error { return m }

// InterestValidationError is the validation error returned by
// Interest.Validate if the designated constraints aren't met.
type InterestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InterestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InterestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InterestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InterestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InterestValidationError) ErrorName() string { return "InterestValidationError" }

// Error satisfies the builtin error interface
func (e InterestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInterest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InterestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InterestValidationError{}
