// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.2
// source: user-service/v1/user_service.proto

package user_service

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Gender int32

const (
	Gender_GENDER_UNSPECIFIED Gender = 0
	Gender_GENDER_MALE        Gender = 1
	Gender_GENDER_FEMALE      Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "GENDER_MALE",
		2: "GENDER_FEMALE",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"GENDER_MALE":        1,
		"GENDER_FEMALE":      2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[0].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[0]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{0}
}

type Goal int32

const (
	Goal_GOAL_UNSPECIFIED   Goal = 0
	Goal_GOAL_DATING        Goal = 1
	Goal_GOAL_RELATIONSHIP  Goal = 2
	Goal_GOAL_FRIENDSHIP    Goal = 3
	Goal_GOAL_JUST_CHATTING Goal = 4
)

// Enum value maps for Goal.
var (
	Goal_name = map[int32]string{
		0: "GOAL_UNSPECIFIED",
		1: "GOAL_DATING",
		2: "GOAL_RELATIONSHIP",
		3: "GOAL_FRIENDSHIP",
		4: "GOAL_JUST_CHATTING",
	}
	Goal_value = map[string]int32{
		"GOAL_UNSPECIFIED":   0,
		"GOAL_DATING":        1,
		"GOAL_RELATIONSHIP":  2,
		"GOAL_FRIENDSHIP":    3,
		"GOAL_JUST_CHATTING": 4,
	}
)

func (x Goal) Enum() *Goal {
	p := new(Goal)
	*p = x
	return p
}

func (x Goal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Goal) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[1].Descriptor()
}

func (Goal) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[1]
}

func (x Goal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Goal.Descriptor instead.
func (Goal) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{1}
}

type Sport int32

const (
	Sport_SPORT_UNSPECIFIED  Sport = 0
	Sport_SPORT_RUNNING      Sport = 1
	Sport_SPORT_SWIMMING     Sport = 2
	Sport_SPORT_YOGA         Sport = 3
	Sport_SPORT_BYCICLE      Sport = 4
	Sport_SPORT_GYM          Sport = 5
	Sport_SPORT_SKIING       Sport = 6
	Sport_SPORT_SNOWBOARDING Sport = 7
	Sport_SPORT_DANCING      Sport = 8
	Sport_SPORT_MARTIAL_ARTS Sport = 9
	Sport_SPORT_SURFING      Sport = 10
	Sport_SPORT_HIKING       Sport = 11
	Sport_SPORT_TENNIS       Sport = 12
	Sport_SPORT_CLIMBING     Sport = 13
)

// Enum value maps for Sport.
var (
	Sport_name = map[int32]string{
		0:  "SPORT_UNSPECIFIED",
		1:  "SPORT_RUNNING",
		2:  "SPORT_SWIMMING",
		3:  "SPORT_YOGA",
		4:  "SPORT_BYCICLE",
		5:  "SPORT_GYM",
		6:  "SPORT_SKIING",
		7:  "SPORT_SNOWBOARDING",
		8:  "SPORT_DANCING",
		9:  "SPORT_MARTIAL_ARTS",
		10: "SPORT_SURFING",
		11: "SPORT_HIKING",
		12: "SPORT_TENNIS",
		13: "SPORT_CLIMBING",
	}
	Sport_value = map[string]int32{
		"SPORT_UNSPECIFIED":  0,
		"SPORT_RUNNING":      1,
		"SPORT_SWIMMING":     2,
		"SPORT_YOGA":         3,
		"SPORT_BYCICLE":      4,
		"SPORT_GYM":          5,
		"SPORT_SKIING":       6,
		"SPORT_SNOWBOARDING": 7,
		"SPORT_DANCING":      8,
		"SPORT_MARTIAL_ARTS": 9,
		"SPORT_SURFING":      10,
		"SPORT_HIKING":       11,
		"SPORT_TENNIS":       12,
		"SPORT_CLIMBING":     13,
	}
)

func (x Sport) Enum() *Sport {
	p := new(Sport)
	*p = x
	return p
}

func (x Sport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sport) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[2].Descriptor()
}

func (Sport) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[2]
}

func (x Sport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sport.Descriptor instead.
func (Sport) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{2}
}

type Selfdevelopment int32

const (
	Selfdevelopment_SELFDEVELOPMENT_UNSPECIFIED    Selfdevelopment = 0
	Selfdevelopment_SELFDEVELOPMENT_LANGUAGES      Selfdevelopment = 1
	Selfdevelopment_SELFDEVELOPMENT_LECTURES       Selfdevelopment = 2
	Selfdevelopment_SELFDEVELOPMENT_ONLINE_COURSES Selfdevelopment = 3
	Selfdevelopment_SELFDEVELOPMENT_SELF_EDUCATION Selfdevelopment = 4
	Selfdevelopment_SELFDEVELOPMENT_MEDITATION     Selfdevelopment = 5
	Selfdevelopment_SELFDEVELOPMENT_PSYCHOLOGY     Selfdevelopment = 6
	Selfdevelopment_SELFDEVELOPMENT_PHILOSOPHY     Selfdevelopment = 7
	Selfdevelopment_SELFDEVELOPMENT_HISTORY        Selfdevelopment = 8
	Selfdevelopment_SELFDEVELOPMENT_TECHNOLOGY     Selfdevelopment = 9
	Selfdevelopment_SELFDEVELOPMENT_READING        Selfdevelopment = 10
)

// Enum value maps for Selfdevelopment.
var (
	Selfdevelopment_name = map[int32]string{
		0:  "SELFDEVELOPMENT_UNSPECIFIED",
		1:  "SELFDEVELOPMENT_LANGUAGES",
		2:  "SELFDEVELOPMENT_LECTURES",
		3:  "SELFDEVELOPMENT_ONLINE_COURSES",
		4:  "SELFDEVELOPMENT_SELF_EDUCATION",
		5:  "SELFDEVELOPMENT_MEDITATION",
		6:  "SELFDEVELOPMENT_PSYCHOLOGY",
		7:  "SELFDEVELOPMENT_PHILOSOPHY",
		8:  "SELFDEVELOPMENT_HISTORY",
		9:  "SELFDEVELOPMENT_TECHNOLOGY",
		10: "SELFDEVELOPMENT_READING",
	}
	Selfdevelopment_value = map[string]int32{
		"SELFDEVELOPMENT_UNSPECIFIED":    0,
		"SELFDEVELOPMENT_LANGUAGES":      1,
		"SELFDEVELOPMENT_LECTURES":       2,
		"SELFDEVELOPMENT_ONLINE_COURSES": 3,
		"SELFDEVELOPMENT_SELF_EDUCATION": 4,
		"SELFDEVELOPMENT_MEDITATION":     5,
		"SELFDEVELOPMENT_PSYCHOLOGY":     6,
		"SELFDEVELOPMENT_PHILOSOPHY":     7,
		"SELFDEVELOPMENT_HISTORY":        8,
		"SELFDEVELOPMENT_TECHNOLOGY":     9,
		"SELFDEVELOPMENT_READING":        10,
	}
)

func (x Selfdevelopment) Enum() *Selfdevelopment {
	p := new(Selfdevelopment)
	*p = x
	return p
}

func (x Selfdevelopment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Selfdevelopment) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[3].Descriptor()
}

func (Selfdevelopment) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[3]
}

func (x Selfdevelopment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Selfdevelopment.Descriptor instead.
func (Selfdevelopment) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{3}
}

type Art int32

const (
	Art_ART_UNSPECIFIED Art = 0
	Art_ART_PAINTING    Art = 1
	Art_ART_PHOTOGRAPH  Art = 2
	Art_ART_MUSIC       Art = 3
	Art_ART_SINGING     Art = 4
	Art_ART_WRITING     Art = 5
	Art_ART_SCULPTURE   Art = 6
	Art_ART_THEATER     Art = 7
	Art_ART_CINEMA      Art = 8
	Art_ART_NEEDLEWORK  Art = 9
)

// Enum value maps for Art.
var (
	Art_name = map[int32]string{
		0: "ART_UNSPECIFIED",
		1: "ART_PAINTING",
		2: "ART_PHOTOGRAPH",
		3: "ART_MUSIC",
		4: "ART_SINGING",
		5: "ART_WRITING",
		6: "ART_SCULPTURE",
		7: "ART_THEATER",
		8: "ART_CINEMA",
		9: "ART_NEEDLEWORK",
	}
	Art_value = map[string]int32{
		"ART_UNSPECIFIED": 0,
		"ART_PAINTING":    1,
		"ART_PHOTOGRAPH":  2,
		"ART_MUSIC":       3,
		"ART_SINGING":     4,
		"ART_WRITING":     5,
		"ART_SCULPTURE":   6,
		"ART_THEATER":     7,
		"ART_CINEMA":      8,
		"ART_NEEDLEWORK":  9,
	}
)

func (x Art) Enum() *Art {
	p := new(Art)
	*p = x
	return p
}

func (x Art) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Art) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[4].Descriptor()
}

func (Art) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[4]
}

func (x Art) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Art.Descriptor instead.
func (Art) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{4}
}

type Social int32

const (
	Social_SOCIAL_UNSPECIFIED    Social = 0
	Social_SOCIAL_VOLUNTEERING   Social = 1
	Social_SOCIAL_CHARITY        Social = 2
	Social_SOCIAL_ECO_ACTIVISM   Social = 3
	Social_SOCIAL_ELDERLY_CARE   Social = 4
	Social_SOCIAL_CHILDCARE      Social = 5
	Social_SOCIAL_ANIMAL_WELFARE Social = 6
)

// Enum value maps for Social.
var (
	Social_name = map[int32]string{
		0: "SOCIAL_UNSPECIFIED",
		1: "SOCIAL_VOLUNTEERING",
		2: "SOCIAL_CHARITY",
		3: "SOCIAL_ECO_ACTIVISM",
		4: "SOCIAL_ELDERLY_CARE",
		5: "SOCIAL_CHILDCARE",
		6: "SOCIAL_ANIMAL_WELFARE",
	}
	Social_value = map[string]int32{
		"SOCIAL_UNSPECIFIED":    0,
		"SOCIAL_VOLUNTEERING":   1,
		"SOCIAL_CHARITY":        2,
		"SOCIAL_ECO_ACTIVISM":   3,
		"SOCIAL_ELDERLY_CARE":   4,
		"SOCIAL_CHILDCARE":      5,
		"SOCIAL_ANIMAL_WELFARE": 6,
	}
)

func (x Social) Enum() *Social {
	p := new(Social)
	*p = x
	return p
}

func (x Social) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Social) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[5].Descriptor()
}

func (Social) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[5]
}

func (x Social) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Social.Descriptor instead.
func (Social) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{5}
}

type Hobby int32

const (
	Hobby_HOBBY_UNSPECIFIED          Hobby = 0
	Hobby_HOBBY_LITERATURE           Hobby = 1
	Hobby_HOBBY_VIDEO_GAMES          Hobby = 2
	Hobby_HOBBY_BOARD_GAMES          Hobby = 3
	Hobby_HOBBY_TRAVELS              Hobby = 4
	Hobby_HOBBY_PLANT_CULTIVATION    Hobby = 5
	Hobby_HOBBY_FISHING              Hobby = 6
	Hobby_HOBBY_DOG_WALKS            Hobby = 7
	Hobby_HOBBY_CATS_LOVER           Hobby = 8
	Hobby_HOBBY_CARS_AND_MOTORCYCLES Hobby = 9
	Hobby_HOBBY_CONCERTS             Hobby = 10
)

// Enum value maps for Hobby.
var (
	Hobby_name = map[int32]string{
		0:  "HOBBY_UNSPECIFIED",
		1:  "HOBBY_LITERATURE",
		2:  "HOBBY_VIDEO_GAMES",
		3:  "HOBBY_BOARD_GAMES",
		4:  "HOBBY_TRAVELS",
		5:  "HOBBY_PLANT_CULTIVATION",
		6:  "HOBBY_FISHING",
		7:  "HOBBY_DOG_WALKS",
		8:  "HOBBY_CATS_LOVER",
		9:  "HOBBY_CARS_AND_MOTORCYCLES",
		10: "HOBBY_CONCERTS",
	}
	Hobby_value = map[string]int32{
		"HOBBY_UNSPECIFIED":          0,
		"HOBBY_LITERATURE":           1,
		"HOBBY_VIDEO_GAMES":          2,
		"HOBBY_BOARD_GAMES":          3,
		"HOBBY_TRAVELS":              4,
		"HOBBY_PLANT_CULTIVATION":    5,
		"HOBBY_FISHING":              6,
		"HOBBY_DOG_WALKS":            7,
		"HOBBY_CATS_LOVER":           8,
		"HOBBY_CARS_AND_MOTORCYCLES": 9,
		"HOBBY_CONCERTS":             10,
	}
)

func (x Hobby) Enum() *Hobby {
	p := new(Hobby)
	*p = x
	return p
}

func (x Hobby) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hobby) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[6].Descriptor()
}

func (Hobby) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[6]
}

func (x Hobby) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hobby.Descriptor instead.
func (Hobby) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{6}
}

type Gastronomy int32

const (
	Gastronomy_GASTRONOMY_UNSPECIFIED      Gastronomy = 0
	Gastronomy_GASTRONOMY_COOKING          Gastronomy = 1
	Gastronomy_GASTRONOMY_WINE_DEGUSTATION Gastronomy = 2
	Gastronomy_GASTRONOMY_BARS             Gastronomy = 3
	Gastronomy_GASTRONOMY_COFFEE           Gastronomy = 4
	Gastronomy_GASTRONOMY_TEA              Gastronomy = 5
	Gastronomy_GASTRONOMY_VEGAN            Gastronomy = 6
	Gastronomy_GASTRONOMY_FOOD_CRITIC      Gastronomy = 7
	Gastronomy_GASTRONOMY_SUGAR_LOVER      Gastronomy = 8
)

// Enum value maps for Gastronomy.
var (
	Gastronomy_name = map[int32]string{
		0: "GASTRONOMY_UNSPECIFIED",
		1: "GASTRONOMY_COOKING",
		2: "GASTRONOMY_WINE_DEGUSTATION",
		3: "GASTRONOMY_BARS",
		4: "GASTRONOMY_COFFEE",
		5: "GASTRONOMY_TEA",
		6: "GASTRONOMY_VEGAN",
		7: "GASTRONOMY_FOOD_CRITIC",
		8: "GASTRONOMY_SUGAR_LOVER",
	}
	Gastronomy_value = map[string]int32{
		"GASTRONOMY_UNSPECIFIED":      0,
		"GASTRONOMY_COOKING":          1,
		"GASTRONOMY_WINE_DEGUSTATION": 2,
		"GASTRONOMY_BARS":             3,
		"GASTRONOMY_COFFEE":           4,
		"GASTRONOMY_TEA":              5,
		"GASTRONOMY_VEGAN":            6,
		"GASTRONOMY_FOOD_CRITIC":      7,
		"GASTRONOMY_SUGAR_LOVER":      8,
	}
)

func (x Gastronomy) Enum() *Gastronomy {
	p := new(Gastronomy)
	*p = x
	return p
}

func (x Gastronomy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gastronomy) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[7].Descriptor()
}

func (Gastronomy) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[7]
}

func (x Gastronomy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gastronomy.Descriptor instead.
func (Gastronomy) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{7}
}

type Zodiac int32

const (
	Zodiac_ZODIAC_UNSPECIFIED Zodiac = 0
	Zodiac_ZODIAC_ARIES       Zodiac = 1
	Zodiac_ZODIAC_TAURUS      Zodiac = 2
	Zodiac_ZODIAC_GEMINI      Zodiac = 3
	Zodiac_ZODIAC_CANCER      Zodiac = 4
	Zodiac_ZODIAC_LEO         Zodiac = 5
	Zodiac_ZODIAC_VIRGO       Zodiac = 6
	Zodiac_ZODIAC_LIBRA       Zodiac = 7
	Zodiac_ZODIAC_SCORPIO     Zodiac = 8
	Zodiac_ZODIAC_SAGITTARIUS Zodiac = 9
	Zodiac_ZODIAC_CAPRICORN   Zodiac = 10
	Zodiac_ZODIAC_AQUARIUS    Zodiac = 11
	Zodiac_ZODIAC_PISCES      Zodiac = 12
)

// Enum value maps for Zodiac.
var (
	Zodiac_name = map[int32]string{
		0:  "ZODIAC_UNSPECIFIED",
		1:  "ZODIAC_ARIES",
		2:  "ZODIAC_TAURUS",
		3:  "ZODIAC_GEMINI",
		4:  "ZODIAC_CANCER",
		5:  "ZODIAC_LEO",
		6:  "ZODIAC_VIRGO",
		7:  "ZODIAC_LIBRA",
		8:  "ZODIAC_SCORPIO",
		9:  "ZODIAC_SAGITTARIUS",
		10: "ZODIAC_CAPRICORN",
		11: "ZODIAC_AQUARIUS",
		12: "ZODIAC_PISCES",
	}
	Zodiac_value = map[string]int32{
		"ZODIAC_UNSPECIFIED": 0,
		"ZODIAC_ARIES":       1,
		"ZODIAC_TAURUS":      2,
		"ZODIAC_GEMINI":      3,
		"ZODIAC_CANCER":      4,
		"ZODIAC_LEO":         5,
		"ZODIAC_VIRGO":       6,
		"ZODIAC_LIBRA":       7,
		"ZODIAC_SCORPIO":     8,
		"ZODIAC_SAGITTARIUS": 9,
		"ZODIAC_CAPRICORN":   10,
		"ZODIAC_AQUARIUS":    11,
		"ZODIAC_PISCES":      12,
	}
)

func (x Zodiac) Enum() *Zodiac {
	p := new(Zodiac)
	*p = x
	return p
}

func (x Zodiac) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Zodiac) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[8].Descriptor()
}

func (Zodiac) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[8]
}

func (x Zodiac) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Zodiac.Descriptor instead.
func (Zodiac) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{8}
}

type Education int32

const (
	Education_EDUCATION_UNSPECIFIED Education = 0
	Education_EDUCATION_SECONDARY   Education = 1
	Education_EDUCATION_HIGHER      Education = 2
	Education_EDUCATION_PHD         Education = 3
)

// Enum value maps for Education.
var (
	Education_name = map[int32]string{
		0: "EDUCATION_UNSPECIFIED",
		1: "EDUCATION_SECONDARY",
		2: "EDUCATION_HIGHER",
		3: "EDUCATION_PHD",
	}
	Education_value = map[string]int32{
		"EDUCATION_UNSPECIFIED": 0,
		"EDUCATION_SECONDARY":   1,
		"EDUCATION_HIGHER":      2,
		"EDUCATION_PHD":         3,
	}
)

func (x Education) Enum() *Education {
	p := new(Education)
	*p = x
	return p
}

func (x Education) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Education) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[9].Descriptor()
}

func (Education) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[9]
}

func (x Education) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Education.Descriptor instead.
func (Education) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{9}
}

type Children int32

const (
	Children_CHILDREN_UNSPECIFIED Children = 0
	Children_CHILDREN_NO          Children = 1
	Children_CHILDREN_NOT_YET     Children = 2
	Children_CHILDREN_YES         Children = 3
)

// Enum value maps for Children.
var (
	Children_name = map[int32]string{
		0: "CHILDREN_UNSPECIFIED",
		1: "CHILDREN_NO",
		2: "CHILDREN_NOT_YET",
		3: "CHILDREN_YES",
	}
	Children_value = map[string]int32{
		"CHILDREN_UNSPECIFIED": 0,
		"CHILDREN_NO":          1,
		"CHILDREN_NOT_YET":     2,
		"CHILDREN_YES":         3,
	}
)

func (x Children) Enum() *Children {
	p := new(Children)
	*p = x
	return p
}

func (x Children) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Children) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[10].Descriptor()
}

func (Children) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[10]
}

func (x Children) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Children.Descriptor instead.
func (Children) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{10}
}

type Alcohol int32

const (
	Alcohol_ALCOHOL_UNSPECIFIED Alcohol = 0
	Alcohol_ALCOHOL_NEGATIVELY  Alcohol = 1
	Alcohol_ALCOHOL_NEUTRALLY   Alcohol = 2
	Alcohol_ALCOHOL_POSITIVELY  Alcohol = 3
)

// Enum value maps for Alcohol.
var (
	Alcohol_name = map[int32]string{
		0: "ALCOHOL_UNSPECIFIED",
		1: "ALCOHOL_NEGATIVELY",
		2: "ALCOHOL_NEUTRALLY",
		3: "ALCOHOL_POSITIVELY",
	}
	Alcohol_value = map[string]int32{
		"ALCOHOL_UNSPECIFIED": 0,
		"ALCOHOL_NEGATIVELY":  1,
		"ALCOHOL_NEUTRALLY":   2,
		"ALCOHOL_POSITIVELY":  3,
	}
)

func (x Alcohol) Enum() *Alcohol {
	p := new(Alcohol)
	*p = x
	return p
}

func (x Alcohol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alcohol) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[11].Descriptor()
}

func (Alcohol) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[11]
}

func (x Alcohol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alcohol.Descriptor instead.
func (Alcohol) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{11}
}

type Smoking int32

const (
	Smoking_SMOKING_UNSPECIFIED Smoking = 0
	Smoking_SMOKING_NEGATIVELY  Smoking = 1
	Smoking_SMOKING_NEUTRALLY   Smoking = 2
	Smoking_SMOKING_POSITIVELY  Smoking = 3
)

// Enum value maps for Smoking.
var (
	Smoking_name = map[int32]string{
		0: "SMOKING_UNSPECIFIED",
		1: "SMOKING_NEGATIVELY",
		2: "SMOKING_NEUTRALLY",
		3: "SMOKING_POSITIVELY",
	}
	Smoking_value = map[string]int32{
		"SMOKING_UNSPECIFIED": 0,
		"SMOKING_NEGATIVELY":  1,
		"SMOKING_NEUTRALLY":   2,
		"SMOKING_POSITIVELY":  3,
	}
)

func (x Smoking) Enum() *Smoking {
	p := new(Smoking)
	*p = x
	return p
}

func (x Smoking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Smoking) Descriptor() protoreflect.EnumDescriptor {
	return file_user_service_v1_user_service_proto_enumTypes[12].Descriptor()
}

func (Smoking) Type() protoreflect.EnumType {
	return &file_user_service_v1_user_service_proto_enumTypes[12]
}

func (x Smoking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Smoking.Descriptor instead.
func (Smoking) EnumDescriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{12}
}

type CreateUserV1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age           int32                  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Gender        Gender                 `protobuf:"varint,3,opt,name=gender,proto3,enum=backend.Gender" json:"gender,omitempty"`
	Location      string                 `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Bio           string                 `protobuf:"bytes,5,opt,name=bio,proto3" json:"bio,omitempty"`
	Goal          Goal                   `protobuf:"varint,6,opt,name=goal,proto3,enum=backend.Goal" json:"goal,omitempty"`
	Interest      *Interest              `protobuf:"bytes,7,opt,name=interest,proto3" json:"interest,omitempty"`
	Zodiac        Zodiac                 `protobuf:"varint,8,opt,name=zodiac,proto3,enum=backend.Zodiac" json:"zodiac,omitempty"`
	Height        int32                  `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	Education     Education              `protobuf:"varint,10,opt,name=education,proto3,enum=backend.Education" json:"education,omitempty"`
	Children      Children               `protobuf:"varint,11,opt,name=children,proto3,enum=backend.Children" json:"children,omitempty"`
	Alcohol       Alcohol                `protobuf:"varint,12,opt,name=alcohol,proto3,enum=backend.Alcohol" json:"alcohol,omitempty"`
	Smoking       Smoking                `protobuf:"varint,13,opt,name=smoking,proto3,enum=backend.Smoking" json:"smoking,omitempty"`
	Hidden        bool                   `protobuf:"varint,14,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Verified      bool                   `protobuf:"varint,15,opt,name=verified,proto3" json:"verified,omitempty"`
	Photos        []*Photo               `protobuf:"bytes,16,rep,name=photos,proto3" json:"photos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserV1Request) Reset() {
	*x = CreateUserV1Request{}
	mi := &file_user_service_v1_user_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserV1Request) ProtoMessage() {}

func (x *CreateUserV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_user_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserV1Request.ProtoReflect.Descriptor instead.
func (*CreateUserV1Request) Descriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUserV1Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateUserV1Request) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *CreateUserV1Request) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *CreateUserV1Request) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateUserV1Request) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *CreateUserV1Request) GetGoal() Goal {
	if x != nil {
		return x.Goal
	}
	return Goal_GOAL_UNSPECIFIED
}

func (x *CreateUserV1Request) GetInterest() *Interest {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *CreateUserV1Request) GetZodiac() Zodiac {
	if x != nil {
		return x.Zodiac
	}
	return Zodiac_ZODIAC_UNSPECIFIED
}

func (x *CreateUserV1Request) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CreateUserV1Request) GetEducation() Education {
	if x != nil {
		return x.Education
	}
	return Education_EDUCATION_UNSPECIFIED
}

func (x *CreateUserV1Request) GetChildren() Children {
	if x != nil {
		return x.Children
	}
	return Children_CHILDREN_UNSPECIFIED
}

func (x *CreateUserV1Request) GetAlcohol() Alcohol {
	if x != nil {
		return x.Alcohol
	}
	return Alcohol_ALCOHOL_UNSPECIFIED
}

func (x *CreateUserV1Request) GetSmoking() Smoking {
	if x != nil {
		return x.Smoking
	}
	return Smoking_SMOKING_UNSPECIFIED
}

func (x *CreateUserV1Request) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *CreateUserV1Request) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CreateUserV1Request) GetPhotos() []*Photo {
	if x != nil {
		return x.Photos
	}
	return nil
}

type CreateUserV1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserV1Response) Reset() {
	*x = CreateUserV1Response{}
	mi := &file_user_service_v1_user_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserV1Response) ProtoMessage() {}

func (x *CreateUserV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_user_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserV1Response.ProtoReflect.Descriptor instead.
func (*CreateUserV1Response) Descriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserV1Response) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserV1Request struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age           int32                  `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Gender        Gender                 `protobuf:"varint,4,opt,name=gender,proto3,enum=backend.Gender" json:"gender,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Bio           string                 `protobuf:"bytes,6,opt,name=bio,proto3" json:"bio,omitempty"`
	Goal          Goal                   `protobuf:"varint,7,opt,name=goal,proto3,enum=backend.Goal" json:"goal,omitempty"`
	Interest      *Interest              `protobuf:"bytes,8,opt,name=interest,proto3" json:"interest,omitempty"`
	Zodiac        Zodiac                 `protobuf:"varint,9,opt,name=zodiac,proto3,enum=backend.Zodiac" json:"zodiac,omitempty"`
	Height        int32                  `protobuf:"varint,10,opt,name=height,proto3" json:"height,omitempty"`
	Education     Education              `protobuf:"varint,11,opt,name=education,proto3,enum=backend.Education" json:"education,omitempty"`
	Children      Children               `protobuf:"varint,12,opt,name=children,proto3,enum=backend.Children" json:"children,omitempty"`
	Alcohol       Alcohol                `protobuf:"varint,13,opt,name=alcohol,proto3,enum=backend.Alcohol" json:"alcohol,omitempty"`
	Smoking       Smoking                `protobuf:"varint,14,opt,name=smoking,proto3,enum=backend.Smoking" json:"smoking,omitempty"`
	Hidden        bool                   `protobuf:"varint,15,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Verified      bool                   `protobuf:"varint,16,opt,name=verified,proto3" json:"verified,omitempty"`
	Photos        []*Photo               `protobuf:"bytes,17,rep,name=photos,proto3" json:"photos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserV1Request) Reset() {
	*x = UpdateUserV1Request{}
	mi := &file_user_service_v1_user_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserV1Request) ProtoMessage() {}

func (x *UpdateUserV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_user_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserV1Request.ProtoReflect.Descriptor instead.
func (*UpdateUserV1Request) Descriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserV1Request) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserV1Request) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUserV1Request) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UpdateUserV1Request) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *UpdateUserV1Request) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UpdateUserV1Request) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *UpdateUserV1Request) GetGoal() Goal {
	if x != nil {
		return x.Goal
	}
	return Goal_GOAL_UNSPECIFIED
}

func (x *UpdateUserV1Request) GetInterest() *Interest {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *UpdateUserV1Request) GetZodiac() Zodiac {
	if x != nil {
		return x.Zodiac
	}
	return Zodiac_ZODIAC_UNSPECIFIED
}

func (x *UpdateUserV1Request) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *UpdateUserV1Request) GetEducation() Education {
	if x != nil {
		return x.Education
	}
	return Education_EDUCATION_UNSPECIFIED
}

func (x *UpdateUserV1Request) GetChildren() Children {
	if x != nil {
		return x.Children
	}
	return Children_CHILDREN_UNSPECIFIED
}

func (x *UpdateUserV1Request) GetAlcohol() Alcohol {
	if x != nil {
		return x.Alcohol
	}
	return Alcohol_ALCOHOL_UNSPECIFIED
}

func (x *UpdateUserV1Request) GetSmoking() Smoking {
	if x != nil {
		return x.Smoking
	}
	return Smoking_SMOKING_UNSPECIFIED
}

func (x *UpdateUserV1Request) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *UpdateUserV1Request) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *UpdateUserV1Request) GetPhotos() []*Photo {
	if x != nil {
		return x.Photos
	}
	return nil
}

type UpdateUserV1Response struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserV1Response) Reset() {
	*x = UpdateUserV1Response{}
	mi := &file_user_service_v1_user_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserV1Response) ProtoMessage() {}

func (x *UpdateUserV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_user_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserV1Response.ProtoReflect.Descriptor instead.
func (*UpdateUserV1Response) Descriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateUserV1Response) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age           int32                  `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Gender        Gender                 `protobuf:"varint,4,opt,name=gender,proto3,enum=backend.Gender" json:"gender,omitempty"`
	Location      string                 `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Bio           string                 `protobuf:"bytes,6,opt,name=bio,proto3" json:"bio,omitempty"`
	Goal          Goal                   `protobuf:"varint,7,opt,name=goal,proto3,enum=backend.Goal" json:"goal,omitempty"`
	Interest      *Interest              `protobuf:"bytes,8,opt,name=interest,proto3" json:"interest,omitempty"`
	Zodiac        Zodiac                 `protobuf:"varint,9,opt,name=zodiac,proto3,enum=backend.Zodiac" json:"zodiac,omitempty"`
	Height        int32                  `protobuf:"varint,10,opt,name=height,proto3" json:"height,omitempty"`
	Education     Education              `protobuf:"varint,11,opt,name=education,proto3,enum=backend.Education" json:"education,omitempty"`
	Children      Children               `protobuf:"varint,12,opt,name=children,proto3,enum=backend.Children" json:"children,omitempty"`
	Alcohol       Alcohol                `protobuf:"varint,13,opt,name=alcohol,proto3,enum=backend.Alcohol" json:"alcohol,omitempty"`
	Smoking       Smoking                `protobuf:"varint,14,opt,name=smoking,proto3,enum=backend.Smoking" json:"smoking,omitempty"`
	Hidden        bool                   `protobuf:"varint,15,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Verified      bool                   `protobuf:"varint,16,opt,name=verified,proto3" json:"verified,omitempty"`
	Photos        []*Photo               `protobuf:"bytes,17,rep,name=photos,proto3" json:"photos,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_user_service_v1_user_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_user_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *User) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *User) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *User) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *User) GetGoal() Goal {
	if x != nil {
		return x.Goal
	}
	return Goal_GOAL_UNSPECIFIED
}

func (x *User) GetInterest() *Interest {
	if x != nil {
		return x.Interest
	}
	return nil
}

func (x *User) GetZodiac() Zodiac {
	if x != nil {
		return x.Zodiac
	}
	return Zodiac_ZODIAC_UNSPECIFIED
}

func (x *User) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *User) GetEducation() Education {
	if x != nil {
		return x.Education
	}
	return Education_EDUCATION_UNSPECIFIED
}

func (x *User) GetChildren() Children {
	if x != nil {
		return x.Children
	}
	return Children_CHILDREN_UNSPECIFIED
}

func (x *User) GetAlcohol() Alcohol {
	if x != nil {
		return x.Alcohol
	}
	return Alcohol_ALCOHOL_UNSPECIFIED
}

func (x *User) GetSmoking() Smoking {
	if x != nil {
		return x.Smoking
	}
	return Smoking_SMOKING_UNSPECIFIED
}

func (x *User) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetPhotos() []*Photo {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Photo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	UploadedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=uploaded_at,json=uploadedAt,proto3" json:"uploaded_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Photo) Reset() {
	*x = Photo{}
	mi := &file_user_service_v1_user_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_user_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{5}
}

func (x *Photo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Photo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Photo) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Photo) GetUploadedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UploadedAt
	}
	return nil
}

type Interest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Sport           []Sport                `protobuf:"varint,1,rep,packed,name=sport,proto3,enum=backend.Sport" json:"sport,omitempty"`
	Selfdevelopment []Selfdevelopment      `protobuf:"varint,2,rep,packed,name=selfdevelopment,proto3,enum=backend.Selfdevelopment" json:"selfdevelopment,omitempty"`
	Art             []Art                  `protobuf:"varint,3,rep,packed,name=art,proto3,enum=backend.Art" json:"art,omitempty"`
	Social          []Social               `protobuf:"varint,4,rep,packed,name=social,proto3,enum=backend.Social" json:"social,omitempty"`
	Hobby           []Hobby                `protobuf:"varint,5,rep,packed,name=hobby,proto3,enum=backend.Hobby" json:"hobby,omitempty"`
	Gastronomy      []Gastronomy           `protobuf:"varint,6,rep,packed,name=gastronomy,proto3,enum=backend.Gastronomy" json:"gastronomy,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Interest) Reset() {
	*x = Interest{}
	mi := &file_user_service_v1_user_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Interest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interest) ProtoMessage() {}

func (x *Interest) ProtoReflect() protoreflect.Message {
	mi := &file_user_service_v1_user_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interest.ProtoReflect.Descriptor instead.
func (*Interest) Descriptor() ([]byte, []int) {
	return file_user_service_v1_user_service_proto_rawDescGZIP(), []int{6}
}

func (x *Interest) GetSport() []Sport {
	if x != nil {
		return x.Sport
	}
	return nil
}

func (x *Interest) GetSelfdevelopment() []Selfdevelopment {
	if x != nil {
		return x.Selfdevelopment
	}
	return nil
}

func (x *Interest) GetArt() []Art {
	if x != nil {
		return x.Art
	}
	return nil
}

func (x *Interest) GetSocial() []Social {
	if x != nil {
		return x.Social
	}
	return nil
}

func (x *Interest) GetHobby() []Hobby {
	if x != nil {
		return x.Hobby
	}
	return nil
}

func (x *Interest) GetGastronomy() []Gastronomy {
	if x != nil {
		return x.Gastronomy
	}
	return nil
}

var File_user_service_v1_user_service_proto protoreflect.FileDescriptor

var file_user_service_v1_user_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x05, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xe0, 0x41, 0x02,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x12, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0b, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x03, 0x62, 0x69,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02,
	0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x6f,
	0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x67, 0x6f,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x7a, 0x6f, 0x64, 0x69, 0x61, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x5a, 0x6f, 0x64, 0x69,
	0x61, 0x63, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x7a, 0x6f,
	0x64, 0x69, 0x61, 0x63, 0x12, 0x1f, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x6c,
	0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c,
	0x12, 0x34, 0x0a, 0x07, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6d, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73,
	0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x39, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xc2, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x12, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12,
	0x2b, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x7a,
	0x6f, 0x64, 0x69, 0x61, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x5a, 0x6f, 0x64, 0x69, 0x61, 0x63, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x7a, 0x6f, 0x64, 0x69, 0x61, 0x63, 0x12, 0x1f,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x3a, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x45, 0x64, 0x75,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x6d,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x39, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xb1, 0x05, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x21, 0x0a,
	0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c,
	0x12, 0x2d, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x06, 0x7a, 0x6f, 0x64, 0x69, 0x61, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x5a, 0x6f, 0x64, 0x69, 0x61, 0x63,
	0x52, 0x06, 0x7a, 0x6f, 0x64, 0x69, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x30, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x45, 0x64,
	0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x6c, 0x63,
	0x6f, 0x68, 0x6f, 0x6c, 0x52, 0x07, 0x61, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12, 0x2a, 0x0a,
	0x07, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x73, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a,
	0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x05,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x09,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf2, 0x02, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22,
	0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x51, 0x0a,
	0x0f, 0x73, 0x65, 0x6c, 0x66, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x53, 0x65, 0x6c, 0x66, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0f, 0x73, 0x65, 0x6c, 0x66, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x03, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x72, 0x74, 0x42, 0x0d, 0xfa, 0x42, 0x0a,
	0x92, 0x01, 0x07, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x61, 0x72, 0x74, 0x12,
	0x36, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c,
	0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x48, 0x6f, 0x62, 0x62, 0x79, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x68, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x42, 0x0a, 0x0a,
	0x67, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x47, 0x61, 0x73, 0x74, 0x72,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x2a, 0x44, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45,
	0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x53, 0x48, 0x49, 0x50, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x4a, 0x55, 0x53, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x97, 0x02, 0x0a, 0x05, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x4d, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x59, 0x4f, 0x47, 0x41, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x43, 0x49, 0x43,
	0x4c, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x47, 0x59,
	0x4d, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4b, 0x49,
	0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x4e, 0x4f, 0x57, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x41, 0x52, 0x54, 0x53, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x49, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x0b, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x45, 0x4e, 0x4e, 0x49, 0x53, 0x10, 0x0c, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x4d, 0x42, 0x49, 0x4e,
	0x47, 0x10, 0x0d, 0x2a, 0xf1, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x66, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x4c, 0x46, 0x44,
	0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x4c, 0x46,
	0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x4c, 0x46, 0x44,
	0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x43, 0x54, 0x55,
	0x52, 0x45, 0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x4c, 0x46, 0x44, 0x45, 0x56,
	0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x4c,
	0x46, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4c,
	0x46, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x45, 0x4c, 0x46, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x45, 0x4c, 0x46, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x53, 0x59, 0x43, 0x48, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x10, 0x06, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x45, 0x4c, 0x46, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x48, 0x49, 0x4c, 0x4f, 0x53, 0x4f, 0x50, 0x48, 0x59, 0x10, 0x07, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x45, 0x4c, 0x46, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45,
	0x4c, 0x46, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45,
	0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45,
	0x4c, 0x46, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x2a, 0xb9, 0x01, 0x0a, 0x03, 0x41, 0x72, 0x74, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x49, 0x4e,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x48,
	0x4f, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x52,
	0x54, 0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x54,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52,
	0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x52, 0x54, 0x5f, 0x53, 0x43, 0x55, 0x4c, 0x50, 0x54, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x49, 0x4e, 0x45, 0x4d, 0x41, 0x10, 0x08, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x52, 0x54, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x4c, 0x45, 0x57, 0x4f, 0x52,
	0x4b, 0x10, 0x09, 0x2a, 0xb0, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c,
	0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4e, 0x54, 0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x49, 0x54,
	0x59, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x43,
	0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x53, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x4c, 0x44, 0x45, 0x52, 0x4c, 0x59, 0x5f, 0x43,
	0x41, 0x52, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x43, 0x48, 0x49, 0x4c, 0x44, 0x43, 0x41, 0x52, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x4c,
	0x46, 0x41, 0x52, 0x45, 0x10, 0x06, 0x2a, 0x84, 0x02, 0x0a, 0x05, 0x48, 0x6f, 0x62, 0x62, 0x79,
	0x12, 0x15, 0x0a, 0x11, 0x48, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x4f, 0x42, 0x42, 0x59,
	0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x48, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x42, 0x4f,
	0x41, 0x52, 0x44, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x48,
	0x4f, 0x42, 0x42, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x48, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x43, 0x55,
	0x4c, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x48,
	0x4f, 0x42, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x48, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x44, 0x4f, 0x47, 0x5f, 0x57, 0x41, 0x4c, 0x4b,
	0x53, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x4f, 0x42, 0x42, 0x59, 0x5f, 0x43, 0x41, 0x54,
	0x53, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x42,
	0x42, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x54, 0x4f,
	0x52, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x53, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x4f, 0x42,
	0x42, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x52, 0x54, 0x53, 0x10, 0x0a, 0x2a, 0xef, 0x01,
	0x0a, 0x0a, 0x47, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x1a, 0x0a, 0x16,
	0x47, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x41, 0x53, 0x54,
	0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x57,
	0x49, 0x4e, 0x45, 0x5f, 0x44, 0x45, 0x47, 0x55, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f,
	0x42, 0x41, 0x52, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x41, 0x53, 0x54, 0x52, 0x4f,
	0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x47, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x54, 0x45, 0x41, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f,
	0x56, 0x45, 0x47, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x53, 0x54, 0x52,
	0x4f, 0x4e, 0x4f, 0x4d, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x41, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d,
	0x59, 0x5f, 0x53, 0x55, 0x47, 0x41, 0x52, 0x5f, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x08, 0x2a,
	0x89, 0x02, 0x0a, 0x06, 0x5a, 0x6f, 0x64, 0x69, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x12, 0x5a, 0x4f,
	0x44, 0x49, 0x41, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x41, 0x52, 0x49,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x54,
	0x41, 0x55, 0x52, 0x55, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x5a, 0x4f, 0x44, 0x49, 0x41,
	0x43, 0x5f, 0x47, 0x45, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x5a, 0x4f,
	0x44, 0x49, 0x41, 0x43, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x4c, 0x45, 0x4f, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x56, 0x49, 0x52, 0x47, 0x4f, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x10,
	0x07, 0x12, 0x12, 0x0a, 0x0e, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x50, 0x49, 0x4f, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f,
	0x53, 0x41, 0x47, 0x49, 0x54, 0x54, 0x41, 0x52, 0x49, 0x55, 0x53, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x43, 0x41, 0x50, 0x52, 0x49, 0x43, 0x4f, 0x52,
	0x4e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x5a, 0x4f, 0x44, 0x49, 0x41, 0x43, 0x5f, 0x41, 0x51,
	0x55, 0x41, 0x52, 0x49, 0x55, 0x53, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x5a, 0x4f, 0x44, 0x49,
	0x41, 0x43, 0x5f, 0x50, 0x49, 0x53, 0x43, 0x45, 0x53, 0x10, 0x0c, 0x2a, 0x68, 0x0a, 0x09, 0x45,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x44, 0x55, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x48, 0x44, 0x10, 0x03, 0x2a, 0x5d, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x59, 0x45, 0x54,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x5f, 0x59,
	0x45, 0x53, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x07, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x4c, 0x43, 0x4f, 0x48, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x43, 0x4f,
	0x48, 0x4f, 0x4c, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x59, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x4c, 0x43, 0x4f, 0x48, 0x4f, 0x4c, 0x5f, 0x4e, 0x45, 0x55, 0x54,
	0x52, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x43, 0x4f, 0x48,
	0x4f, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x59, 0x10, 0x03, 0x2a,
	0x69, 0x0a, 0x07, 0x53, 0x6d, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4d,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4d, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4e,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x4d, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4d, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x59, 0x10, 0x03, 0x32, 0xa3, 0x04, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x02, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x12, 0x1c, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb6, 0x01, 0x92, 0x41, 0x97, 0x01, 0x12,
	0x29, 0xd0, 0xa1, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0x1a, 0x59, 0xd0, 0x9f, 0xd1, 0x80,
	0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0,
	0xb2, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd1, 0x81, 0xd0, 0xbe,
	0xd0, 0xb7, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0,
	0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0x62, 0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x31, 0x12, 0x8c, 0x02, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x31, 0x12, 0x1c, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xbe, 0x01, 0x92, 0x41, 0x9f, 0x01, 0x12, 0x2d, 0xd0, 0x9e, 0xd0, 0xb1, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0,
	0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0x1a, 0x5d, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xb6,
	0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0x20,
	0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5,
	0xd0, 0xbb, 0xd1, 0x8f, 0x62, 0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x31,
	0x42, 0xdf, 0x02, 0x92, 0x41, 0x95, 0x02, 0x12, 0x95, 0x01, 0x0a, 0x2e, 0xd0, 0x9f, 0xd1, 0x80,
	0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5,
	0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xba,
	0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0x12, 0x5c, 0xd0, 0xa1, 0xd0, 0xb5,
	0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb7, 0xd0,
	0xb2, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xbb, 0xd1, 0x8e,
	0xd0, 0xb4, 0xd1, 0x8f, 0xd0, 0xbc, 0x20, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd1,
	0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbb, 0xd1, 0x8e, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xb9, 0x20, 0xd0,
	0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xb7, 0xd0, 0xbd, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xbe,
	0xd0, 0xbc, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb2, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x1a,
	0x0e, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x37, 0x30, 0x30, 0x31, 0x2a,
	0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x43, 0x0a, 0x41, 0x0a, 0x09, 0x61, 0x70, 0x69,
	0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x08, 0x02, 0x12, 0x21, 0xd0, 0xa2, 0xd0, 0xbe,
	0xd0, 0xba, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,
	0x80, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x1a, 0x0b, 0x78,
	0x2d, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x5a, 0x44, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x6f, 0x72, 0x65, 0x6d, 0x69, 0x32,
	0x30, 0x33, 0x2f, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x79, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_service_v1_user_service_proto_rawDescOnce sync.Once
	file_user_service_v1_user_service_proto_rawDescData = file_user_service_v1_user_service_proto_rawDesc
)

func file_user_service_v1_user_service_proto_rawDescGZIP() []byte {
	file_user_service_v1_user_service_proto_rawDescOnce.Do(func() {
		file_user_service_v1_user_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_service_v1_user_service_proto_rawDescData)
	})
	return file_user_service_v1_user_service_proto_rawDescData
}

var file_user_service_v1_user_service_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_user_service_v1_user_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_user_service_v1_user_service_proto_goTypes = []any{
	(Gender)(0),                   // 0: backend.Gender
	(Goal)(0),                     // 1: backend.Goal
	(Sport)(0),                    // 2: backend.Sport
	(Selfdevelopment)(0),          // 3: backend.Selfdevelopment
	(Art)(0),                      // 4: backend.Art
	(Social)(0),                   // 5: backend.Social
	(Hobby)(0),                    // 6: backend.Hobby
	(Gastronomy)(0),               // 7: backend.Gastronomy
	(Zodiac)(0),                   // 8: backend.Zodiac
	(Education)(0),                // 9: backend.Education
	(Children)(0),                 // 10: backend.Children
	(Alcohol)(0),                  // 11: backend.Alcohol
	(Smoking)(0),                  // 12: backend.Smoking
	(*CreateUserV1Request)(nil),   // 13: backend.CreateUserV1Request
	(*CreateUserV1Response)(nil),  // 14: backend.CreateUserV1Response
	(*UpdateUserV1Request)(nil),   // 15: backend.UpdateUserV1Request
	(*UpdateUserV1Response)(nil),  // 16: backend.UpdateUserV1Response
	(*User)(nil),                  // 17: backend.User
	(*Photo)(nil),                 // 18: backend.Photo
	(*Interest)(nil),              // 19: backend.Interest
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
}
var file_user_service_v1_user_service_proto_depIdxs = []int32{
	0,  // 0: backend.CreateUserV1Request.gender:type_name -> backend.Gender
	1,  // 1: backend.CreateUserV1Request.goal:type_name -> backend.Goal
	19, // 2: backend.CreateUserV1Request.interest:type_name -> backend.Interest
	8,  // 3: backend.CreateUserV1Request.zodiac:type_name -> backend.Zodiac
	9,  // 4: backend.CreateUserV1Request.education:type_name -> backend.Education
	10, // 5: backend.CreateUserV1Request.children:type_name -> backend.Children
	11, // 6: backend.CreateUserV1Request.alcohol:type_name -> backend.Alcohol
	12, // 7: backend.CreateUserV1Request.smoking:type_name -> backend.Smoking
	18, // 8: backend.CreateUserV1Request.photos:type_name -> backend.Photo
	17, // 9: backend.CreateUserV1Response.user:type_name -> backend.User
	0,  // 10: backend.UpdateUserV1Request.gender:type_name -> backend.Gender
	1,  // 11: backend.UpdateUserV1Request.goal:type_name -> backend.Goal
	19, // 12: backend.UpdateUserV1Request.interest:type_name -> backend.Interest
	8,  // 13: backend.UpdateUserV1Request.zodiac:type_name -> backend.Zodiac
	9,  // 14: backend.UpdateUserV1Request.education:type_name -> backend.Education
	10, // 15: backend.UpdateUserV1Request.children:type_name -> backend.Children
	11, // 16: backend.UpdateUserV1Request.alcohol:type_name -> backend.Alcohol
	12, // 17: backend.UpdateUserV1Request.smoking:type_name -> backend.Smoking
	18, // 18: backend.UpdateUserV1Request.photos:type_name -> backend.Photo
	17, // 19: backend.UpdateUserV1Response.user:type_name -> backend.User
	0,  // 20: backend.User.gender:type_name -> backend.Gender
	1,  // 21: backend.User.goal:type_name -> backend.Goal
	19, // 22: backend.User.interest:type_name -> backend.Interest
	8,  // 23: backend.User.zodiac:type_name -> backend.Zodiac
	9,  // 24: backend.User.education:type_name -> backend.Education
	10, // 25: backend.User.children:type_name -> backend.Children
	11, // 26: backend.User.alcohol:type_name -> backend.Alcohol
	12, // 27: backend.User.smoking:type_name -> backend.Smoking
	18, // 28: backend.User.photos:type_name -> backend.Photo
	20, // 29: backend.User.created_at:type_name -> google.protobuf.Timestamp
	20, // 30: backend.User.updated_at:type_name -> google.protobuf.Timestamp
	20, // 31: backend.Photo.uploaded_at:type_name -> google.protobuf.Timestamp
	2,  // 32: backend.Interest.sport:type_name -> backend.Sport
	3,  // 33: backend.Interest.selfdevelopment:type_name -> backend.Selfdevelopment
	4,  // 34: backend.Interest.art:type_name -> backend.Art
	5,  // 35: backend.Interest.social:type_name -> backend.Social
	6,  // 36: backend.Interest.hobby:type_name -> backend.Hobby
	7,  // 37: backend.Interest.gastronomy:type_name -> backend.Gastronomy
	13, // 38: backend.UserService.CreateUserV1:input_type -> backend.CreateUserV1Request
	15, // 39: backend.UserService.UpdateUserV1:input_type -> backend.UpdateUserV1Request
	14, // 40: backend.UserService.CreateUserV1:output_type -> backend.CreateUserV1Response
	16, // 41: backend.UserService.UpdateUserV1:output_type -> backend.UpdateUserV1Response
	40, // [40:42] is the sub-list for method output_type
	38, // [38:40] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_user_service_v1_user_service_proto_init() }
func file_user_service_v1_user_service_proto_init() {
	if File_user_service_v1_user_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_service_v1_user_service_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_service_v1_user_service_proto_goTypes,
		DependencyIndexes: file_user_service_v1_user_service_proto_depIdxs,
		EnumInfos:         file_user_service_v1_user_service_proto_enumTypes,
		MessageInfos:      file_user_service_v1_user_service_proto_msgTypes,
	}.Build()
	File_user_service_v1_user_service_proto = out.File
	file_user_service_v1_user_service_proto_rawDesc = nil
	file_user_service_v1_user_service_proto_goTypes = nil
	file_user_service_v1_user_service_proto_depIdxs = nil
}
