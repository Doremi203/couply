package telegram

import (
	"fmt"
	"strings"

	"github.com/Doremi203/couply/backend/blocker/internal/domain/blocker"

	user_service "github.com/Doremi203/couply/backend/matcher/gen/api/user-service/v1"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *BotClient) SendReportMessage(user *user_service.User, reasons []blocker.ReportReason, message string) error {
	createdAt := user.GetCreatedAt().AsTime().Format("02.01.2006 15:04")

	parsedReasons := make([]string, len(reasons))
	for i, reason := range reasons {
		parsedReasons[i] = reason.String()
	}

	var photosText strings.Builder
	for i, photo := range user.GetPhotos() {
		photosText.WriteString(fmt.Sprintf("%d. %s\n", i+1, photo.GetUrl()))
	}
	photosStr := photosText.String()
	if photosStr == "" {
		photosStr = "–Ω–µ—Ç —Ñ–æ—Ç–æ"
	}

	text := fmt.Sprintf(
		"üö® *–ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê –ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø*\n\n"+
			"ID: %s\n"+
			"–ò–º—è: %s\n"+
			"–í–æ–∑—Ä–∞—Å—Ç: %d\n"+
			"–ü–æ–ª: %s\n"+
			"–û —Å–µ–±–µ: %s\n"+
			"–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: %t\n"+
			"–ü—Ä–µ–º–∏—É–º: %t\n"+
			"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: %t\n"+
			"–§–æ—Ç–æ: %v\n"+
			"–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: %s\n\n"+
			"–ü—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã: %v\n"+
			"–°–æ–æ–±—â–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã: %s",
		user.GetId(),
		user.GetName(),
		user.GetAge(),
		getGenderStr(user.GetGender()),
		user.GetBio(),
		user.GetIsVerified(),
		user.GetIsPremium(),
		user.GetIsBlocked(),
		photosStr,
		createdAt,
		parsedReasons,
		message,
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "block_"+user.GetId()),
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "dismiss_"+user.GetId()),
		),
	)

	msg := tgbotapi.NewMessage(b.adminChatID, text)
	msg.ReplyMarkup = keyboard
	msg.ParseMode = "Markdown"

	_, err := b.api.Send(msg)
	if err != nil {
		return err
	}

	return nil
}

func getGenderStr(gender user_service.Gender) string {
	switch gender {
	case user_service.Gender_GENDER_UNSPECIFIED:
		return "–ù–µ—Ç –≥–µ–Ω–¥–µ—Ä–∞"
	case user_service.Gender_GENDER_MALE:
		return "–ú—É–∂—á–∏–Ω–∞"
	case user_service.Gender_GENDER_FEMALE:
		return "–ñ–µ–Ω—â–∏–Ω–∞"
	default:
		return "–ù–µ—Ç –≥–µ–Ω–¥–µ—Ä–∞"
	}
}
