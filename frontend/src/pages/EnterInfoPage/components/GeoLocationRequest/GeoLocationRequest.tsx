import { Settings, GpsFixed, HelpOutline } from '@mui/icons-material';
import { Dialog, Button, Typography, CircularProgress } from '@mui/material';
import { useState, useEffect } from 'react';

import { PWAGeolocationHelper } from '../PWAGeolocationHelper';

import styles from './geoLocationRequest.module.css';

interface GeoLocationRequestProps {
  onLocationReceived?: (coords: { lat: number; lng: number }) => void;
}

const GeoLocationRequest: React.FC<GeoLocationRequestProps> = ({ onLocationReceived }) => {
  const [showHelp, setShowHelp] = useState(false);
  const [showPWAHelper, setShowPWAHelper] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [isIOS, setIsIOS] = useState(false);
  const [isPWA, setIsPWA] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [locationStatus, setLocationStatus] = useState<'initial' | 'success' | 'error' | 'denied'>(
    'initial',
  );

  // Detect platform on component mount
  useEffect(() => {
    detectPlatform();
  }, []);

  // Determine if the app is running as a PWA
  useEffect(() => {
    // Check if the app is running in standalone mode (installed as PWA)
    const isInStandaloneMode = () =>
      window.matchMedia('(display-mode: standalone)').matches ||
      (window.navigator as any).standalone ||
      document.referrer.includes('android-app://');

    setIsPWA(isInStandaloneMode());
  }, []);

  // Detect user's platform
  const detectPlatform = () => {
    const userAgent = navigator.userAgent.toLowerCase();
    setIsMobile(/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent));
    setIsIOS(/iphone|ipad|ipod/.test(userAgent));
  };

  // Request geolocation permission
  const handleGeoRequest = () => {
    setIsLoading(true);
    setLocationStatus('initial');

    // Check if geolocation is supported
    if (!navigator.geolocation) {
      setLocationStatus('error');
      setIsLoading(false);
      setShowHelp(true);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      position => {
        // Success handler
        setIsLoading(false);
        setLocationStatus('success');

        const coords = {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };

        // Store coordinates in localStorage for persistence
        localStorage.setItem('userLocation', JSON.stringify(coords));

        // Mark that user has allowed geolocation
        localStorage.setItem('userLocationAllowed', 'true');

        // Call the callback if provided
        if (onLocationReceived) {
          onLocationReceived(coords);
        }
      },
      error => {
        setIsLoading(false);

        if (error.code === error.PERMISSION_DENIED) {
          setLocationStatus('denied');
          setShowHelp(true);
        } else {
          setLocationStatus('error');
          setShowHelp(true);
        }
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 0, // Always get fresh location
      },
    );
  };

  // Get platform-specific instructions
  const getInstructions = () => {
    if (isPWA && isIOS) {
      return [
        '1. –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        '2. –û—Ç–∫—Ä–æ–π—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ',
        '3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" > "–°–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"',
        '4. –ù–∞–π–¥–∏—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ',
        '5. –í–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
        '6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      ];
    } else if (isIOS) {
      return [
        '1. –û—Ç–∫—Ä–æ–π—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ',
        '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "Safari" > "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–æ–≤" > "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"',
        '3. –ù–∞–π–¥–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–†–∞–∑—Ä–µ—à–∏—Ç—å"',
        '4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É',
      ];
    } else if (isPWA && !isIOS) {
      return [
        '1. –ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        '2. –û—Ç–∫—Ä–æ–π—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –Ω–∞ –≤–∞—à–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ',
        '3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è" > –ù–∞–π–¥–∏—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        '4. –í—ã–±–µ—Ä–∏—Ç–µ "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è" > "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"',
        '5. –í–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
        '6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      ];
    } else if (isMobile && !isIOS) {
      return [
        '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∑–∞–º–∫–∞ –∏–ª–∏ —Ç—Ä–∏ —Ç–æ—á–∫–∏ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ',
        '2. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞" –∏–ª–∏ "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è"',
        '3. –ù–∞–π–¥–∏—Ç–µ –ø—É–Ω–∫—Ç "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"',
        '4. –í—ã–±–µ—Ä–∏—Ç–µ "–†–∞–∑—Ä–µ—à–∏—Ç—å"',
        '5. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É',
      ];
    }

    // Desktop instructions
    return [
      '1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∑–∞–º–∫–∞ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ',
      '2. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞"',
      '3. –ù–∞–π–¥–∏—Ç–µ –ø—É–Ω–∫—Ç "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"',
      '4. –í—ã–±–µ—Ä–∏—Ç–µ "–†–∞–∑—Ä–µ—à–∏—Ç—å"',
      '5. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É',
    ];
  };

  // Open device settings
  const openSettings = () => {
    try {
      if (isIOS) {
        // iOS settings URL schemes
        // Try multiple schemes as browser support varies
        if (isPWA) {
          // For PWA on iOS
          window.open('app-settings:', '_blank');
        } else {
          // For Safari
          window.location.href = 'App-Prefs:Privacy&path=LOCATION';

          // Fallback with timeout
          setTimeout(() => {
            window.location.href = 'prefs:root=LOCATION_SERVICES';
          }, 300);
        }
      } else if (!isIOS && isMobile) {
        // Android settings
        // Try multiple approaches

        // Intent URL for Android
        window.location.href = 'intent://settings/location#Intent;scheme=android-app;end';

        // Fallbacks with timeout
        setTimeout(() => {
          // Standard settings URL
          window.location.href = 'android.settings.LOCATION_SOURCE_SETTINGS';
        }, 300);

        setTimeout(() => {
          // Generic settings as last resort
          window.open('settings://', '_system');
        }, 600);
      } else {
        // For desktop, just close the dialog and retry
        setShowHelp(false);
      }
    } catch {
      // Show manual instructions if automatic opening fails
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ.');
    }
  };

  return (
    <div className={styles.geoContainer}>
      <Button
        variant="contained"
        color="primary"
        startIcon={isLoading ? <CircularProgress size={20} color="inherit" /> : <GpsFixed />}
        onClick={handleGeoRequest}
        disabled={isLoading}
        className={styles.geoButton}
      >
        {isLoading ? '–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏...' : '–†–∞–∑—Ä–µ—à–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'}
      </Button>

      {locationStatus === 'success' && (
        <Typography className={styles.successMessage}>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ ‚úì</Typography>
      )}

      <Dialog open={showHelp} onClose={() => setShowHelp(false)}>
        <div className={styles.dialogContent}>
          <Typography variant="h6" gutterBottom>
            üõ† –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:
          </Typography>

          {getInstructions().map((step, index) => (
            <Typography key={index} paragraph className={styles.instructionStep}>
              {step}
            </Typography>
          ))}

          <div className={styles.dialogButtons}>
            <Button
              variant="contained"
              color="primary"
              startIcon={<GpsFixed />}
              onClick={() => {
                setShowHelp(false);
                handleGeoRequest();
              }}
              className={styles.retryButton}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>

            {(isMobile || isPWA) && (
              <>
                <Button
                  variant="outlined"
                  startIcon={<Settings />}
                  onClick={openSettings}
                  className={styles.settingsButton}
                >
                  –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Button>

                {isPWA && (
                  <Button
                    variant="text"
                    startIcon={<HelpOutline />}
                    onClick={() => setShowPWAHelper(true)}
                    className={styles.helpButton}
                  >
                    –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
                  </Button>
                )}

                <Typography variant="caption" className={styles.settingsNote}>
                  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö
                  —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä—É—á–Ω—É—é.
                </Typography>
              </>
            )}
          </div>
        </div>
      </Dialog>

      {/* PWA-specific helper with detailed instructions */}
      <PWAGeolocationHelper
        open={showPWAHelper}
        onClose={() => setShowPWAHelper(false)}
        isIOS={isIOS}
      />
    </div>
  );
};

export default GeoLocationRequest;
